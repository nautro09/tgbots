import os
import telebot
import requests
from telebot import types
from datetime import datetime, timedelta
from bs4 import BeautifulSoup
import random
import time
import re
import requests
import json
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
import html  # –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏–º–≤–æ–ª–æ–≤
import threading
from PIL import Image
import io
import sqlite3
import math
import logging
from youtube_search import YoutubeSearch
import pyshorteners
from googletrans import Translator
from telebot.types import Message


# API –∫–ª—é—á OpenWeatherMap
API = os.getenv('API', 'YOUR_API_KEY')

TOKEN = os.getenv('TOKEN','YOUR_TOKEN') 
bot = telebot.TeleBot(TOKEN)


# –°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤
BAD_WORDS = ['–ø–ª–æ—Ö–æ–µ1', '–ø–ª–æ—Ö–æ–µ2', '–ø–ª–æ—Ö–æ–µ3','—á–ª–µ–Ω']

# –°—á–µ—Ç—á–∏–∫ —Å–ª–æ–≤
message_counter = 0
user_activity = {}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–ø–∞–º–∞
spam_status = {}
# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∏—Ö —Å—Ä–æ–∫–∞ –º—É—Ç–∞
muted_users = {}

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (—Å–ª–æ–≤–∞—Ä—å)
scheduled_notifications = {}

# –í—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
timeslots = ['7:00', '9:00', '13:00', '16:00', '20:00']

# –î–Ω–∏ –Ω–µ–¥–µ–ª–∏
days_of_week = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']

# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
user_scheduling = {}

#–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –¥–ª—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏
active_sessions = set()


# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
translator = Translator()
shortener = pyshorteners.Shortener()

# Emojis
EMOJI_CLOCK = '‚è≤'
EMOJI_CALENDAR = 'üìÜ'
EMOJI_ARROW = '‚û°'
EMOJI_CHECK = '‚úÖ'
EMOJI_CROSS = '‚ùå'
EMOJI_EDIT = '‚úè'
EMOJI_DELETE = 'üóëÔ∏è'
EMOJI_INFO = '‚Ñπ'
heart_emoji = "‚ù§"
dice_emoji = "üé≤"
ghost_emoji = "üëª"
mask_emoji = "üé≠"
robot_emoji = "ü§ñ"
gift_emoji = "üéÅ"

# –°–ø–∏—Å–æ–∫ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –¥–ª—è —É–¥–∞—á–∏ –∏ –Ω–µ—É–¥–∞—á–∏
interactions = {
    "—É–±–∏—Ç—å": {"success": "üíÄ @{target} –±—ã–ª —É–±–∏—Ç @{sender}!", "fail": "ü§ï @{sender} –ø—ã—Ç–∞–ª—Å—è —É–±–∏—Ç—å @{target}, –Ω–æ –ø–æ—Ç–µ—Ä–ø–µ–ª –Ω–µ—É–¥–∞—á—É!"},
    "–ø–æ—Ü–µ–ª–æ–≤–∞—Ç—å": {"success": "üòò @{sender} –ø–æ—Ü–µ–ª–æ–≤–∞–ª @{target}! –ö–∞–∫ –º–∏–ª–æ!", "fail": "üíî @{target} –æ—Ç–≤–µ—Ä–≥ –ø–æ—Ü–µ–ª—É–π @{sender}."},
    "–æ–±–Ω—è—Ç—å": {"success": "ü§ó @{sender} –æ–±–Ω—è–ª @{target}. –¢–µ–ø–ª–æ –∏ —É—é—Ç–Ω–æ!", "fail": "üôÖ @{target} –Ω–µ –∑–∞—Ö–æ—Ç–µ–ª –æ–±–Ω–∏–º–∞—Ç—å @{sender}."},
    "—É–¥–∞—Ä–∏—Ç—å": {"success": "üëä @{sender} —É–¥–∞—Ä–∏–ª @{target}! –ë–æ–ª—å–Ω–æ!", "fail": "üò¨ @{sender} –ø—Ä–æ–º–∞—Ö–Ω—É–ª—Å—è –∏ —É–¥–∞—Ä–∏–ª —Å–µ–±—è."},
    "–∑–∞—Ä–∞–∑–∏—Ç—å": {"success": "üò∑ @{sender} –∑–∞—Ä–∞–∑–∏–ª @{target} –≤–∏—Ä—É—Å–æ–º! –ë–µ—Ä–µ–≥–∏—Å—å!", "fail": "ü¶† @{target} –æ–∫–∞–∑–∞–ª—Å—è –Ω–µ–≤–æ—Å–ø—Ä–∏–∏–º—á–∏–≤—ã–º!"},
    "—Å–∂–µ—á—å": {"success": "üî• @{sender} —Å–∂—ë–≥ @{target}! –ü–µ–ø–µ–ª –æ—Å—Ç–∞–ª—Å—è!", "fail": "üí¶ @{target} —É—Å–ø–µ–ª –ø–æ—Ç—É—à–∏—Ç—å –æ–≥–æ–Ω—å!"},
    "–∑–∞—Å—Ç—Ä–µ–ª–∏—Ç—å": {"success": "üî´ @{sender} –∑–∞—Å—Ç—Ä–µ–ª–∏–ª @{target}! –í–∑—Ä—ã–≤ —ç–º–æ—Ü–∏–π!", "fail": "üò≤ @{target} —É–≤–µ—Ä–Ω—É–ª—Å—è –æ—Ç –≤—ã—Å—Ç—Ä–µ–ª–∞!"},
    "—Ä–∞—Å—Å–º–µ—à–∏—Ç—å": {"success": "üòÇ @{sender} —Ä–∞—Å—Å–º–µ—à–∏–ª @{target}. –ö–∞–∫–æ–π —é–º–æ—Ä–∏—Å—Ç!", "fail": "üòê @{target} –æ—Å—Ç–∞–ª—Å—è —Ä–∞–≤–Ω–æ–¥—É—à–Ω—ã–º –∫ —à—É—Ç–∫–∞–º @{sender}."},
    "–∫–∞—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å": {"success": "‚úÇÔ∏è @{sender} –∫–∞—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª @{target}! üò±", "fail": "üôÖ @{target} –æ–∫–∞–∑–∞–ª—Å—è —Å–ª–∏—à–∫–æ–º –ª–æ–≤–∫–∏–º –∏ –∏–∑–±–µ–∂–∞–ª –∫–∞—Å—Ç—Ä–∞—Ü–∏–∏."},
    "–≤–∑–±–µ—Å–∏—Ç—å": {"success": "üò° @{sender} —Å–∏–ª—å–Ω–æ –±–µ—Å–∏—Ç @{target}!", "fail": "üòè @{target} –Ω–µ –ø–æ–¥–¥–∞–ª—Å—è —Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–∏—é."},
    "–∏—Å–ø—É–≥–∞—Ç—å": {"success": "üëª @{sender} –∏—Å–ø—É–≥–∞–ª @{target} –¥–æ –¥—Ä–æ–∂–∏!", "fail": "üòé @{target} –Ω–µ –∏—Å–ø—É–≥–∞–ª—Å—è –≤—ã—Ö–æ–¥–∫–∏ @{sender}."},
    "–ø–æ—Ö–≤–∞–ª–∏—Ç—å": {"success": "üëè @{sender} –ø–æ—Ö–≤–∞–ª–∏–ª @{target} –∑–∞ —Ö–æ—Ä–æ—à—É—é —Ä–∞–±–æ—Ç—É!", "fail": "üòï @{target} –Ω–µ –æ—Ü–µ–Ω–∏–ª –ø–æ—Ö–≤–∞–ª—É –æ—Ç @{sender}."},
    "–ø–Ω—É—Ç—å": {"success": "ü•æ @{sender} –ø–Ω—É–ª @{target} —Å —Å–∏–ª–æ–π!", "fail": "üòÇ @{target} —É–≤–µ—Ä–Ω—É–ª—Å—è –æ—Ç —É–¥–∞—Ä–∞ @{sender}."},
    "–ø–æ–¥–∞—Ä–∏—Ç—å": {"success": "üéÅ @{sender} –ø–æ–¥–∞—Ä–∏–ª @{target} –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫!", "fail": "üòû @{target} –Ω–µ –ø—Ä–∏–Ω—è–ª –ø–æ–¥–∞—Ä–æ–∫ –æ—Ç @{sender}."}
}
# –°–ø–∏—Å–æ–∫ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏
characteristics = [
    ("–°–º–µ–ª—ã–π", "–≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤ –∫ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è–º", "ü¶Å"), ("–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π", "–≤—Å–µ–≥–¥–∞ —Ä–∞–¥ –Ω–æ–≤—ã–º –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞–º", "ü§ù"),("–ó–∞–≥–∞–¥–æ—á–Ω—ã–π", "–Ω–∏–∫—Ç–æ –Ω–µ –∑–Ω–∞–µ—Ç –µ–≥–æ —Å–µ–∫—Ä–µ—Ç–æ–≤", "üïµÔ∏è"),
    ("–í–µ—Å—ë–ª—ã–π", "—Å –Ω–∏–º –≤—Å–µ–≥–¥–∞ –ø—Ä–∞–∑–¥–Ω–∏–∫", "üòÇ"),("–¢—Ä—É–¥–æ–ª—é–±–∏–≤—ã–π", "–≥–æ—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞—Ç—å 24/7", "üõ†Ô∏è"),("–ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–π", "–Ω–∞–π–¥–µ—Ç –≤—ã—Ö–æ–¥ –∏–∑ –ª—é–±–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏", "üé®"),
    ("–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π", "–≤—Å–µ–≥–¥–∞ –∏–º–µ–µ—Ç —É–º–Ω—ã–π –ø–ª–∞–Ω", "üß†"),("–≠–Ω–µ—Ä–≥–∏—á–Ω—ã–π", "–µ–≥–æ —Ö–≤–∞—Ç–∏—Ç –Ω–∞ –≤—Å–µ—Ö", "‚ö°"),("–ú—É–¥—Ä—ã–π", "—Å–ª–æ–≤–Ω–æ –¥—Ä–µ–≤–Ω–∏–π —Ñ–∏–ª–æ—Å–æ—Ñ", "üßô‚Äç‚ôÇÔ∏è"),
    ("–ù–µ–ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º—ã–π", "–Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –∑–Ω–∞–µ—à—å, —á—Ç–æ –±—É–¥–µ—Ç –¥–∞–ª—å—à–µ", "üé≤"),("–û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã–π", "—Å–º–æ—Ç—Ä–∏—Ç –Ω–∞ –∂–∏–∑–Ω—å —á–µ—Ä–µ–∑ —Ä–æ–∑–æ–≤—ã–µ –æ—á–∫–∏", "‚òÄÔ∏è"),("–ß–µ—Å—Ç–Ω—ã–π", "–≤—Å–µ–≥–¥–∞ –≥–æ–≤–æ—Ä–∏—Ç –ø—Ä–∞–≤–¥—É", "üèÖ"),
    ("–°–∫—Ä–æ–º–Ω—ã–π", "–ª—é–±–∏—Ç –±—ã—Ç—å –≤ —Ç–µ–Ω–∏", "üòá"),("–ó–ª–æ–ø–∞–º—è—Ç–Ω—ã–π", "–Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –∑–∞–±—É–¥–µ—Ç –æ–±–∏–¥—É", "üò°"),("–ü–∞–Ω–∏–∫—ë—Ä", "–µ–≥–æ –ª–µ–≥–∫–æ –∏—Å–ø—É–≥–∞—Ç—å", "üö®"),("–õ–µ–Ω–∏–≤—ã–π", "—Å–ø–∏—Ç –∏ –µ—Å—Ç", "üõãÔ∏è"),
    ("–ù–µ—Ä–≤–Ω—ã–π", "–≤—Å–µ–≥–¥–∞ –Ω–∞ –≤–∑–≤–æ–¥–µ", "üò¨"),("–¢—É–ø–æ–≤–∞—Ç—ã–π", "–Ω–æ –∑–∞—Ç–æ –¥–æ–±—Ä—ã–π", "üêë"),("–ó–∞–≤–∏—Å—Ç–ª–∏–≤—ã–π", "—Å–ª–µ–¥–∏—Ç –∑–∞ —É—Å–ø–µ—Ö–∞–º–∏ –¥—Ä—É–≥–∏—Ö", "üëÄ"),("–≠–≥–æ–∏—Å—Ç–∏—á–Ω—ã–π", "–≤—Å–µ–≥–¥–∞ –¥—É–º–∞–µ—Ç –æ —Å–µ–±–µ", "üôÉ"),
    ("–ú–µ–ª–∞–Ω—Ö–æ–ª–∏—á–Ω—ã–π", "–≥—Ä—É—Å—Ç–∏—Ç –ø–æ –≤–µ—á–µ—Ä–∞–º", "üåô"),("–§–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–π", "–≥–ª—É–±–æ–∫–∏–µ –º—ã—Å–ª–∏ –≤ –≥–æ–ª–æ–≤–µ", "ü§î"),("–•–≤–∞—Å—Ç–ª–∏–≤—ã–π", "–ª—é–±–∏—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å–≤–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è", "üí™"),
    ("–°–ª–∏—à–∫–æ–º –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π", "—Å—á–∏—Ç–∞–µ—Ç, —á—Ç–æ –∑–∞ –Ω–∏–º —Å–ª–µ–¥—è—Ç", "üëÄ"),("–†–æ–º–∞–Ω—Ç–∏—á–Ω—ã–π", "–≤–ª—é–±–ª—è–µ—Ç—Å—è –≤ –∫–∞–∂–¥—ã–π –∑–∞–∫–∞—Ç", "üåÖ"),("–¶–∏–Ω–∏—á–Ω—ã–π", "–≤–æ –≤—Å—ë–º –≤–∏–¥–∏—Ç –ø–æ–¥–≤–æ—Ö", "üß©"),
    ("–°–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–π", "–µ–≥–æ –∏—Ä–æ–Ω–∏—è —Ä–µ–∂–µ—Ç –∫–∞–∫ –Ω–æ–∂", "üó°Ô∏è"),("–î–æ–±—Ä—ã–π", "–Ω–µ –ø—Ä–æ–π–¥—ë—Ç –º–∏–º–æ —á—É–∂–æ–π –±–µ–¥—ã", "üß∏"),("–ù–∞–¥—ë–∂–Ω—ã–π", "–Ω–∞ –Ω–µ–≥–æ –º–æ–∂–Ω–æ –ø–æ–ª–æ–∂–∏—Ç—å—Å—è", "üõ°Ô∏è"),("–°–æ–Ω–Ω—ã–π", "–∂–¥—ë—Ç —à–∞–Ω—Å–∞ –≤–∑–¥—Ä–µ–º–Ω—É—Ç—å", "üò¥"),
    ("–ü—Ä—è–º–æ–ª–∏–Ω–µ–π–Ω—ã–π", "–≤ –ª–æ–± –∏ –ø–æ —Ñ–∞–∫—Ç—É", "ü™ì"),("–ë–µ–∑–±–∞—à–µ–Ω–Ω—ã–π", "—Å–Ω–∞—á–∞–ª–∞ –¥–µ–ª–∞–µ—Ç ‚Äî –ø–æ—Ç–æ–º –¥—É–º–∞–µ—Ç", "üé¢"),("–ú–µ—á—Ç–∞—Ç–µ–ª—å–Ω—ã–π", "–∂–∏–≤–µ—Ç –Ω–∞ –æ–±–ª–∞–∫–µ —Ñ–∞–Ω—Ç–∞–∑–∏–π", "‚òÅÔ∏è"),
    ("–†–µ–∞–ª–∏—Å—Ç", "–≤—Å–µ–≥–¥–∞ —Å–º–æ—Ç—Ä–∏—Ç –ø—Ä–∞–≤–¥–µ –≤ –≥–ª–∞–∑–∞", "üîç"),("–ü–µ–¥–∞–Ω—Ç–∏—á–Ω—ã–π", "–∑–∞–º–µ—Ç–∏—Ç –∫–∞–∂–¥—É—é –ø—ã–ª–∏–Ω–∫—É", "üßº"),("–ì–∏–ø–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π", "–µ–º—É –∏ –∫–æ—Ñ–µ –Ω–µ –Ω—É–∂–µ–Ω", "ü¶ø"),("–°–ø–æ–Ω—Ç–∞–Ω–Ω—ã–π", "—Ä–µ—à–µ–Ω–∏—è –ø—Ä–∏—Ö–æ–¥—è—Ç –≤–Ω–µ–∑–∞–ø–Ω–æ", "üí°"),
    ("–•–æ–ª–æ–¥–Ω—ã–π", "–∫–∞–∫ –∞–π—Å–±–µ—Ä–≥ –≤ –æ–∫–µ–∞–Ω–µ —ç–º–æ—Ü–∏–π", "üßä"),("–¢—ë–ø–ª—ã–π", "–≤ –µ–≥–æ –æ–±—ä—è—Ç–∏—è—Ö —É—é—Ç–Ω–æ", "üî•"),("–¶–µ–ª–µ—É—Å—Ç—Ä–µ–º–ª—ë–Ω–Ω—ã–π", "–≤—Å–µ–≥–¥–∞ –∏–¥—ë—Ç –∫ —Å–≤–æ–µ–π —Ü–µ–ª–∏", "üéØ"),
    ("–ê–º–±–∏—Ü–∏–æ–∑–Ω—ã–π", "–º–µ—á—Ç–∞–µ—Ç –æ –º–∏—Ä–æ–≤–æ–º –≥–æ—Å–ø–æ–¥—Å—Ç–≤–µ", "üåç"),("–ß—É–¥–∞–∫–æ–≤–∞—Ç—ã–π", "–Ω–µ–º–Ω–æ–≥–æ —Å—Ç—Ä–∞–Ω–Ω—ã–π, –Ω–æ –æ–±–∞—è—Ç–µ–ª—å–Ω—ã–π", "üõ∏"),("–ò–≥—Ä–∏–≤—ã–π", "—à–∞–ª–∏—Ç –ø–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—é", "üòº"),
    ("–ó–ª–æ–ø–æ–ª—É—á–Ω—ã–π", "–ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è —Å–∞–º–∏ –µ–≥–æ –Ω–∞—Ö–æ–¥—è—Ç", "ü™§"),("–ó–∞–±–æ—Ç–ª–∏–≤—ã–π", "–≤—Å–µ–≥–¥–∞ –ø–æ–º–Ω–∏—Ç, –∫—Ç–æ —á—Ç–æ –ª—é–±–∏—Ç", "üçµ"),
    ("–ú—Å—Ç–∏—Ç–µ–ª—å–Ω—ã–π", "–ø–ª–∞–Ω–∏—Ä—É–µ—Ç –æ—Ç–æ–º—Å—Ç–∏—Ç—å –≤ 2037 –≥–æ–¥—É", "üìÖ"),("–†–∞—Å—Å—É–¥–∏—Ç–µ–ª—å–Ω—ã–π", "–≤—Å—ë –æ–±–¥—É–º–∞–µ—Ç —Ç—Ä–∏–∂–¥—ã", "üìò"),("–ê–≤–∞–Ω—Ç—é—Ä–Ω—ã–π", "–∂–∏–∑–Ω—å ‚Äî –µ–≥–æ –∫–≤–µ—Å—Ç", "üéÆ"),
    ("–°–∫–µ–ø—Ç–∏—á–Ω—ã–π", "–Ω–∏—á–µ–º—É –Ω–µ –≤–µ—Ä–∏—Ç —Å –ø–µ—Ä–≤–æ–≥–æ —Ä–∞–∑–∞", "üßê"),("–ó–∞–ª–∏–ø–∞—Ç–µ–ª—å–Ω—ã–π", "–Ω–∞ –Ω–µ–≥–æ –º–æ–∂–Ω–æ —Å–º–æ—Ç—Ä–µ—Ç—å –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ", "üåÄ"),("–¢–≤–æ—Ä—á–µ—Å–∫–∏–π", "—É –Ω–µ–≥–æ –≤ –≥–æ–ª–æ–≤–µ —Ñ–µ–π–µ—Ä–≤–µ—Ä–∫", "üéÜ"),
    ("–°–ª–∞–¥–∫–æ–µ–∂–∫–∞", "–∂–∏–∑–Ω—å ‚Äî —ç—Ç–æ –¥–µ—Å–µ—Ä—Ç", "üç∞"),("–õ—é–±–æ–ø—ã—Ç–Ω—ã–π", "–≤—Å—ë —Ö–æ—á–µ—Ç –∑–Ω–∞—Ç—å –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å", "üîé"),("–ú–æ–ª—á–∞–ª–∏–≤—ã–π", "–≥–æ–≤–æ—Ä–∏—Ç —Ç–æ–ª—å–∫–æ, –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ", "ü§´"),
    ("–î—Ä–∞–º–∞—Ç–∏—á–Ω—ã–π", "–¥–∞–∂–µ —á–∞–π –ø—å—ë—Ç —Å –Ω–∞–¥—Ä—ã–≤–æ–º", "üé≠"),("–°–∞–º–æ–∏—Ä–æ–Ω–∏—á–Ω—ã–π", "—à—É—Ç–∏—Ç –Ω–∞–¥ —Å–æ–±–æ–π –ª—É—á—à–µ –≤—Å–µ—Ö", "ü™û"),("–õ–æ–≤–∫–∏–π", "–≤–µ—á–Ω–æ –≤—ã–∫—Ä—É—á–∏–≤–∞–µ—Ç—Å—è", "ü§π"),
    ("–•–∏—Ç—Ä—ã–π", "–ø—Ä–∏–¥—É–º–∞–µ—Ç, –∫–∞–∫ –≤—ã–π—Ç–∏ —Å—É—Ö–∏–º –∏–∑ –≤–æ–¥—ã", "ü¶ä"),("–ó–∞–±—ã–≤—á–∏–≤—ã–π", "–≤—Å—ë –ø–æ–º–Ω–∏—Ç, –∫—Ä–æ–º–µ –≤–∞–∂–Ω–æ–≥–æ", "üß†‚ùå"),("–ú–æ–¥–Ω—ã–π", "–∫–∞–∫ —Å –æ–±–ª–æ–∂–∫–∏ –≥–ª—è–Ω—Ü–∞", "üï∂Ô∏è"),("–†–∞—Å—Å–ª–∞–±–ª–µ–Ω–Ω—ã–π", "–≤–µ—á–Ω–æ –Ω–∞ —á–∏–ª–µ", "üõÄ"),
    ("–ë–µ—Å—Å—Ç—Ä–∞—à–Ω—ã–π", "–Ω–∏—á–µ–≥–æ –Ω–µ –±–æ–∏—Ç—Å—è... –ø–æ—á—Ç–∏", "ü¶á"),("–°—Ç—Ä–∞—Ç–µ–≥–∏—á–Ω—ã–π", "–≤ –≥–æ–ª–æ–≤–µ ‚Äî —à–∞—Ö–º–∞—Ç–Ω–∞—è –¥–æ—Å–∫–∞", "‚ôüÔ∏è"),("–û—Å—Ç—Ä–æ—É–º–Ω—ã–π", "–≤—Å–µ–≥–¥–∞ –Ω–∞–π–¥—ë—Ç, —á—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å", "üí¨"),
    ("–¢–µ—Ä–ø–µ–ª–∏–≤—ã–π", "–∂–¥—ë—Ç, –∫–æ–≥–¥–∞ –≤—Å–µ —É—Å–ø–æ–∫–æ—è—Ç—Å—è", "‚è≥"),("–ó–∞–±–∞–≤–Ω—ã–π", "—Å –Ω–∏–º –Ω–µ —Å–æ—Å–∫—É—á–∏—à—å—Å—è", "ü§£"),("–ù–µ—É–∫—Ä–æ—Ç–∏–º—ã–π", "–∫–∞–∫ –≤–µ—Ç–µ—Ä –≤ –ø–æ–ª–µ", "üå™Ô∏è"),("–°–∫—Ä–æ–º–Ω—ã–π", "–Ω–µ –ª—é–±–∏—Ç —Ö–≤–∞—Å—Ç–∞—Ç—å—Å—è", "üôà"),
    ("–¢–∞–π–Ω—ã–π", "–≤—Å—ë —Å–∫—Ä—ã–≤–∞–µ—Ç –∑–∞ –º–∞—Å–∫–æ–π", "üé≠"),("–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π", "–≤—Å–µ–≥–¥–∞ –Ω–∞ –≤–æ–ª–Ω–µ —á—É–≤—Å—Ç–≤", "üåä"),("–°–ø–æ–∫–æ–π–Ω—ã–π", "–∫–∞–∫ –±–æ–∂—å—è –∫–æ—Ä–æ–≤–∫–∞ –Ω–∞ –ª—É–∂–∞–π–∫–µ", "üêû"),("–ë–æ–ª—Ç–ª–∏–≤—ã–π", "—Ä–∞–∑–≥–æ–≤–æ—Ä –ø–æ–¥–¥–µ—Ä–∂–∏—Ç –¥–∞–∂–µ —Å –ª–∞–º–ø–æ–π", "üó£Ô∏è"),
    ("–¢—É—Å–æ–≤–æ—á–Ω—ã–π", "—Ç–∞–º, –≥–¥–µ –æ–Ω ‚Äî —Ç–∞–º –∏ –¥–≤–∏–∂", "üéâ"),
    ("–†–æ–º–∞–Ω—Ç–∏—á–Ω—ã–π —Ü–∏–Ω–∏–∫", "—Ü–≤–µ—Ç—ã –ø–æ–¥–∞—Ä–∏—Ç, –∞ –ø–æ—Ç–æ–º –ø–æ—à—É—Ç–∏—Ç", "üåπüòè"),("–ß–∏—Å—Ç—é–ª—è", "–≤—Å—ë –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ –ª–∏–Ω–µ–µ—á–∫–µ", "üßΩ"),("–†–∞–∑–¥—Ä–∞–∂–∏—Ç–µ–ª—å–Ω—ã–π", "–µ–≥–æ –±–µ—Å–∏—Ç –¥–∞–∂–µ Wi-Fi", "üì∂üò†"),
    ("–§–∞–Ω—Ç–∞–∑—ë—Ä", "–ø—Ä–∏–¥—É–º–∞–ª –±—ã ¬´–ì–∞—Ä—Ä–∏ –ü–æ—Ç—Ç–µ—Ä–∞¬ª, –µ—Å–ª–∏ –±—ã —É—Å–ø–µ–ª", "üìñ‚ú®"),("–ú–æ–ª—á–∞–ª–∏–≤—ã–π —Å—Ç—Ä–∞—Ç–µ–≥", "–≤—Å—ë –≤–∏–¥–∏—Ç, –Ω–æ –º–æ–ª—á–∏—Ç", "üßä‚ôüÔ∏è"),("–í–µ—á–Ω—ã–π —Å—Ç—É–¥–µ–Ω—Ç", "–≤–µ—á–Ω–æ —á—Ç–æ-—Ç–æ —É—á–∏—Ç", "üìö"),
    ("–£–≤–µ—Ä–µ–Ω–Ω—ã–π", "–∑–∞—Ö–æ–¥–∏—Ç –≤ –∫–æ–º–Ω–∞—Ç—É ‚Äî –∏ –≤—Å–µ —ç—Ç–æ —á—É–≤—Å—Ç–≤—É—é—Ç", "üï¥Ô∏è"),
    ("–°–æ–º–Ω–µ–≤–∞—é—â–∏–π—Å—è", "–∞ –≤–¥—Ä—É–≥ –Ω–µ—Ç?..", "ü§∑"),("–ù–µ–ø—Ä–µ–∫–ª–æ–Ω–Ω—ã–π", "–µ–≥–æ –Ω–µ —Å–¥–≤–∏–Ω—É—Ç—å —Å –º–µ—Å—Ç–∞", "ü™®"),("–ë–µ—Å–ø–æ–∫–æ–π–Ω—ã–π", "–¥–∞–∂–µ –≤ –ø–æ–∫–æ–µ —Ç—Ä–µ–≤–æ–∂–µ–Ω", "üåÄ"),
    ("–í–µ–∑—É–Ω—á–∏–∫", "–µ–º—É –ø—Ä–æ—Å—Ç–æ —Ñ–∞—Ä—Ç–∏—Ç", "üçÄ"),
    ("–ü–æ—Ñ–∏–≥–∏—Å—Ç", "–Ω–∏—á—Ç–æ –Ω–µ —Ç—Ä–µ–≤–æ–∂–∏—Ç –µ–≥–æ –¥–∑–µ–Ω", "üßò"),("–û–±–∏–¥—á–∏–≤—ã–π", "–ø–æ–º–Ω–∏—Ç, –∫—Ç–æ –Ω–µ –ø–æ—Å—Ç–∞–≤–∏–ª –ª–∞–π–∫", "üì±üíî"),
    ("–û–±–∞—è—Ç–µ–ª—å–Ω—ã–π", "—É–ª—ã–±–Ω—ë—Ç—Å—è ‚Äî –∏ —Å–µ—Ä–¥—Ü–µ —Ç–∞–µ—Ç", "üòä"),("–ú–µ–¥–ª–∏—Ç–µ–ª—å–Ω—ã–π", "–≤—Å—ë –¥–µ–ª–∞–µ—Ç –≤ —Å–≤–æ—ë–º —Ç–µ–º–ø–µ", "üê¢"),
    ("–û–¥–µ—Ä–∂–∏–º—ã–π –∏–¥–µ–µ–π", "–Ω–µ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è, –ø–æ–∫–∞ –Ω–µ –¥–æ–±—å—ë—Ç—Å—è", "üéØüî•"),("–ò–Ω—Ç—É–∏—Ç–∏–≤–Ω—ã–π", "–æ—â—É—â–∞–µ—Ç, —á—Ç–æ –ø–∏—Ü—Ü–∞ —Å–∫–æ—Ä–æ –ø—Ä–∏–µ–¥–µ—Ç", "üîÆüçï"),
    ("–ó–∞–Ω—É–¥–Ω—ã–π", "–∑–Ω–∞–µ—Ç –≤—Å–µ –ø—Ä–∞–≤–∏–ª–∞ –∏ –Ω–∞–ø–æ–º–Ω–∏—Ç —Ç–µ–±–µ", "üìè"),("–°–∞–º —Å–µ–±–µ –ø—Ä–∞–∑–¥–Ω–∏–∫", "—Å –Ω–∏–º –≤–µ—Å–µ–ª–æ, –¥–∞–∂–µ –≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "üéä"),
    ("–ü–∞—Ä–∞–Ω–æ–∏–∫", "–∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω –ø–æ–¥ –ø–æ–¥—É—à–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∏–ª", "üéôÔ∏èüò≥"),("–§–∞–Ω–∞—Ç–∏—á–Ω—ã–π", "–≤—Å—ë –∏–ª–∏ –Ω–∏—á–µ–≥–æ", "üí£"),
    ("–ü—Ä–∏—è—Ç–Ω—ã–π –≤–æ –≤—Å—ë–º", "–¥–∞–∂–µ –∫–∞–∫—Ç—É—Å—ã –µ–≥–æ –æ–±–æ–∂–∞—é—Ç", "üåµ‚ù§Ô∏è"),("–≠–º–ø–∞—Ç–∏—á–Ω—ã–π", "—á—É–≤—Å—Ç–≤—É–µ—Ç —á—É–∂–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–∏–ª—å–Ω–µ–µ —Å–≤–æ–µ–≥–æ", "ü§ùüíû"),
    ("–ü—Ä–∞–≥–º–∞—Ç–∏–∫", "—Å—á–∏—Ç–∞–µ—Ç –¥–∞–∂–µ –º–µ—á—Ç—ã –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö", "üìà"),
    ("–ê–ø–∞—Ç–∏—á–Ω—ã–π", "–º–æ–∂–µ—Ç –Ω–µ –≤—Å—Ç–∞—Ç—å –¥–∞–∂–µ —Ä–∞–¥–∏ —Ç–æ—Ä—Ç–∞", "üõå"),
    ("–û–±—Ö–æ–¥–∏—Ç–µ–ª—å–Ω—ã–π", "—É–º–µ–µ—Ç –Ω–∞–π—Ç–∏ –æ–±—â–∏–π —è–∑—ã–∫ —Å –∫–µ–º —É–≥–æ–¥–Ω–æ", "ü§ó"),("–ò–¥–µ–∞–ª–∏—Å—Ç", "—Ö–æ—á–µ—Ç, —á—Ç–æ–±—ã –≤—Å—ë –±—ã–ª–æ –∫–∞–∫ –≤ –∫–∏–Ω–æ", "üé¨"),("–≠–∫—Å–ø—Ä–µ—Å—Å–∏–≤–Ω—ã–π", "–≥–æ–≤–æ—Ä–∏—Ç –Ω–µ —Ç–æ–ª—å–∫–æ —Å–ª–æ–≤–∞–º–∏, –Ω–æ –∏ —Ä—É–∫–∞–º–∏", "üëê"),
    ("–ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É—é—â–∏–π", "–≤—Å—ë –ø–æ–¥ –µ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º (–∏–ª–∏ –ø–æ—á—Ç–∏)", "üéõÔ∏è"),("–ë—É–Ω—Ç–∞—Ä—å", "–¥–µ–ª–∞–µ—Ç –Ω–∞–æ–±–æ—Ä–æ—Ç –ø—Ä–æ—Å—Ç–æ –ø–æ—Ç–æ–º—É —á—Ç–æ –º–æ–∂–µ—Ç", "üö´üî•"),
    ("–ü—Ä–∞–∑–¥–Ω—ã–π", "–ª—é–±–∏—Ç –æ—Ç–¥—ã—Ö–∞—Ç—å –±–æ–ª—å—à–µ, —á–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å", "üçπ"),("–ß–µ—Å—Ç–æ–ª—é–±–∏–≤—ã–π", "–º–µ—á—Ç–∞–µ—Ç –æ –ø—å–µ–¥–µ—Å—Ç–∞–ª–µ", "ü•á"),("–ü–µ—Ä–µ–∂–∏–≤–∞—Ç–µ–ª—å–Ω—ã–π", "–≤–æ–ª–Ω—É–µ—Ç—Å—è –¥–∞–∂–µ –∑–∞ –ø–æ–≥–æ–¥—É –Ω–∞ –ú–∞—Ä—Å–µ", "ü™êüòü"),
    ("–ë—ã—Å—Ç—Ä–æ –∑–∞–≥–æ—Ä–∞–µ—Ç—Å—è", "–≤—á–µ—Ä–∞ ‚Äî –∏–¥–µ—è, —Å–µ–≥–æ–¥–Ω—è ‚Äî –ø—Ä–æ–µ–∫—Ç", "‚ö°üß†"),("–ë—ã–≤–∞–µ—Ç –≤ –æ–±–ª–∞–∫–∞—Ö", "–Ω–æ —Å –æ—á–µ–Ω—å –∫—Ä–∞—Å–∏–≤—ã–º –≤–∏–¥–æ–º", "‚òÅÔ∏èüëÄ"),
    ("–ù–µ—É–Ω—ã–≤–∞—é—â–∏–π", "–µ–≥–æ –Ω–µ —Å–ª–æ–º–∞–µ—Ç –¥–∞–∂–µ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "üí™üôÇ"),("–ú–æ–ª—á–∞–ª–∏–≤—ã–π —Ñ–∏–ª–æ—Å–æ—Ñ", "–º–æ–ª—á–∏—Ç ‚Äî –∑–Ω–∞—á–∏—Ç, –¥—É–º–∞–µ—Ç –æ –≤–µ—á–Ω–æ–º", "üååü§´"),
    ("–ë–µ—Å–ø—Ä–µ–¥–µ–ª—å–Ω–æ –¥–æ–±—Ä—ã–π", "–¥–∞–∂–µ –º—É—Ö—É –Ω–∞–∫–æ—Ä–º–∏—Ç", "üêûüçû"),("–°–º–µ–ª—ã–π", "–ø—Ä—ã–≥–∞–µ—Ç –≤ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ—Å—Ç—å —Å —É–ª—ã–±–∫–æ–π", "üõ°Ô∏è"),
    ("–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π", "–∑–Ω–∞–µ—Ç, –∫–∞–∫ –Ω–∞–π—Ç–∏ –æ–±—â–∏–π —è–∑—ã–∫ –¥–∞–∂–µ —Å –∫–∞–∫—Ç—É—Å–æ–º", "üåµü§ó"),("–ó–∞–≥–∞–¥–æ—á–Ω—ã–π", "–ø–æ—è–≤–ª—è–µ—Ç—Å—è –∏ –∏—Å—á–µ–∑–∞–µ—Ç, –æ—Å—Ç–∞–≤–ª—è—è –≤–æ–ø—Ä–æ—Å—ã", "üå´Ô∏è"),
    ("–í–µ—Å—ë–ª—ã–π", "–≤–Ω–æ—Å–∏—Ç —Ä–∞–¥–æ—Å—Ç—å –≤ –ª—é–±–æ–µ –ø–æ–º–µ—â–µ–Ω–∏–µ", "üéà"),("–¢—Ä—É–¥–æ–ª—é–±–∏–≤—ã–π", "—Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–∞–∫, –±—É–¥—Ç–æ –µ–º—É —ç—Ç–æ –≤ –∫–∞–π—Ñ", "üíºüî•"),
    ("–ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–π", "–≤–∏–¥–∏—Ç –º–∏—Ä –≤ —Ñ–æ—Ä–º–∞—Ö –∏ —Ü–≤–µ—Ç–∞—Ö, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞–º–µ—á–∞–µ—Ç", "üß∂"), ("–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π", "—Ä–∞—Å—Å—É–∂–¥–∞–µ—Ç —Ç–∞–∫, —á—Ç–æ –≥–æ–ª–æ–≤–∞ –∏–¥—ë—Ç –∫—Ä—É–≥–æ–º ‚Äî –≤ —Ö–æ—Ä–æ—à–µ–º —Å–º—ã—Å–ª–µ", "üìöüß©"),("–≠–Ω–µ—Ä–≥–∏—á–Ω—ã–π", "–∑–∞—Ä—è–∂–∞–µ—Ç –≤—Å–µ—Ö, –∫–∞–∫ —Ö–æ–¥—è—á–∏–π –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä", "üîã"),
    ("–ú—É–¥—Ä—ã–π", "–≥–æ–≤–æ—Ä–∏—Ç –º–∞–ª–æ, –Ω–æ –º–µ—Ç–∫–æ", "üê¢"),("–ù–µ–ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º—ã–π", "–µ–≥–æ –ø–ª–∞–Ω ‚Äî –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø–ª–∞–Ω–∞", "üéØ‚ùì"),("–û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã–π", "–≤–∏–¥–∏—Ç —Å–æ–ª–Ω—Ü–µ –¥–∞–∂–µ –≤ –ø–∞—Å–º—É—Ä–Ω—É—é –ø–æ–≥–æ–¥—É", "üåà"),
    ("–ß–µ—Å—Ç–Ω—ã–π", "–≤—Å–µ–≥–¥–∞ –≥–æ–≤–æ—Ä–∏—Ç –∫–∞–∫ –µ—Å—Ç—å, –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ–ª–æ–≤–∫–æ", "üîé"),
    ("–°–∫—Ä–æ–º–Ω—ã–π", "–¥–µ–ª–∞–µ—Ç –≤–µ–ª–∏–∫–æ–µ –≤ —Ç–µ–Ω–∏", "üåë"),
    ("–ó–ª–æ–ø–∞–º—è—Ç–Ω—ã–π", "–≤–Ω—É—Ç—Ä–∏ ‚Äî —Ü–µ–ª—ã–π –∞—Ä—Ö–∏–≤ –æ–±–∏–¥", "üóÉÔ∏è"),
    ("–ü–∞–Ω–∏–∫—ë—Ä", "—Å–Ω–∞—á–∞–ª–∞ –∫—Ä–∏—á–∏—Ç, –ø–æ—Ç–æ–º –¥—É–º–∞–µ—Ç", "üôÄ"),
    ("–õ–µ–Ω–∏–≤—ã–π", "–≤ –¥–≤–∏–∂–µ–Ω–∏–∏ ‚Äî —ç–∫–æ–Ω–æ–º–∏—Ç —ç–Ω–µ—Ä–≥–∏—é –ø–æ –º–∞–∫—Å–∏–º—É–º—É", "ü¶•"),
    ("–ù–µ—Ä–≤–Ω—ã–π", "–¥–µ—Ä–≥–∞–µ—Ç—Å—è, –¥–∞–∂–µ –∫–æ–≥–¥–∞ –≤—Å—ë –ø–æ –ø–ª–∞–Ω—É", "üêøÔ∏è"),
    ("–¢—É–ø–æ–≤–∞—Ç—ã–π", "–ø—Ä–æ—Å—Ç–æ–π, –Ω–æ –∏—Å–∫—Ä–µ–Ω–Ω–∏–π", "ü•î"),
    ("–ó–∞–≤–∏—Å—Ç–ª–∏–≤—ã–π", "–≤–µ—á–Ω–æ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç, –∏ –Ω–µ –≤ —Å–≤–æ—é –ø–æ–ª—å–∑—É", "üìä"),
    ("–≠–≥–æ–∏—Å—Ç–∏—á–Ω—ã–π", "–º–∏—Ä –∫—Ä—É—Ç–∏—Ç—Å—è –≤–æ–∫—Ä—É–≥ –Ω–µ–≥–æ ‚Äî –ø–æ –µ–≥–æ –∂–µ –≤–µ—Ä—Å–∏–∏", "ü™û"),
    ("–ú–µ–ª–∞–Ω—Ö–æ–ª–∏—á–Ω—ã–π", "—Ö–æ–¥–∏—Ç —Å –¥–æ–∂–¥—ë–º –≤–Ω—É—Ç—Ä–∏", "üåßÔ∏è"),
    ("–§–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–π", "–≤—Å–µ–≥–¥–∞ –∏—â–µ—Ç —Å–º—ã—Å–ª, –¥–∞–∂–µ –≤ –∫–æ—Ç–ª–µ—Ç–∞—Ö", "ü•©ü§î"),
    ("–•–≤–∞—Å—Ç–ª–∏–≤—ã–π", "–ª—é–±–∏—Ç –ø–æ—Ö–≤–∞–ª–∏—Ç—å —Å–µ–±—è, –æ—Å–æ–±–µ–Ω–Ω–æ –≥—Ä–æ–º–∫–æ", "üì¢"),
    ("–°–ª–∏—à–∫–æ–º –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π", "–≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–∏—Ç —Ç—Ä–∏–∂–¥—ã", "üîçüïµÔ∏è‚Äç‚ôÇÔ∏è"),
    ("–†–æ–º–∞–Ω—Ç–∏—á–Ω—ã–π", "–≤–ª—é–±–ª—ë–Ω –≤ –ª—é–±–æ–≤—å", "üíå"),
    ("–¶–∏–Ω–∏—á–Ω—ã–π", "—Å–º–æ—Ç—Ä–∏—Ç —Å–∫–≤–æ–∑—å –ø—Ä–∏–∑–º—É —Å–∞—Ä–∫–∞–∑–º–∞", "üßÇ"),
    ("–°–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–π", "–µ–≥–æ –∏—Ä–æ–Ω–∏—è ‚Äî —Ç–æ–Ω—å—à–µ –ª–µ–∑–≤–∏—è", "üî™"),
    ("–î–æ–±—Ä—ã–π", "—Å–µ—Ä–¥—Ü–µ —Ä–∞–∑–º–µ—Ä–æ–º —Å –ø–ª–∞–Ω–µ—Ç—É", "üåç‚ù§Ô∏è"),
    ("–ù–∞–¥—ë–∂–Ω—ã–π", "–∫–∞–∫ —è–∫–æ—Ä—å —Å—Ä–µ–¥–∏ —à—Ç–æ—Ä–º–∞", "‚öì"),
    ("–°–æ–Ω–Ω—ã–π", "–≤—Å–µ–≥–¥–∞ –≤ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è", "üí§"),
    ("–ü—Ä—è–º–æ–ª–∏–Ω–µ–π–Ω—ã–π", "–∫–∞–∫ —É–¥–∞—Ä –≤ –ª–æ–± ‚Äî —á–µ—Å—Ç–Ω–æ, –Ω–æ –±–æ–ª—å–Ω–æ", "üìè"),
    ("–ë–µ–∑–±–∞—à–µ–Ω–Ω—ã–π", "–¥–µ–ª–∞–µ—Ç, –∞ –ø–æ—Ç–æ–º –¥—É–º–∞–µ—Ç", "üöÄ"),
    ("–ú–µ—á—Ç–∞—Ç–µ–ª—å–Ω—ã–π", "–∂–∏–≤—ë—Ç –≤ –º–∏—Ä–µ, –≥–¥–µ –≤—Å—ë –≤–æ–∑–º–æ–∂–Ω–æ", "üé†"),
    ("–†–µ–∞–ª–∏—Å—Ç", "–≤–∏–¥–∏—Ç –≤–µ—â–∏ –∫–∞–∫ –µ—Å—Ç—å, –Ω–µ –∫–∞–∫ —Ö–æ—á–µ—Ç—Å—è", "ü™û"),
    ("–ü–µ–¥–∞–Ω—Ç–∏—á–Ω—ã–π", "–∑–Ω–∞–µ—Ç, –≥–¥–µ —á—Ç–æ –¥–æ–ª–∂–Ω–æ –ª–µ–∂–∞—Ç—å", "üßæ"),
    ("–ì–∏–ø–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π", "–≤–µ–∑–¥–µ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ ‚Äî –∏ —Ö–æ—á–µ—Ç –±–æ–ª—å—à–µ", "üéÆ"),
    ("–°–ø–æ–Ω—Ç–∞–Ω–Ω—ã–π", "—Ä–µ—à–∞–µ—Ç –Ω–∞ —Ö–æ–¥—É ‚Äî –∏ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç", "üõ£Ô∏è"),
    ("–•–æ–ª–æ–¥–Ω—ã–π", "–¥–µ—Ä–∂–∏—Ç –¥–∏—Å—Ç–∞–Ω—Ü–∏—é –∏ –Ω–µ –ø–∞–Ω–∏–∫—É–µ—Ç", "‚ùÑÔ∏è"),
    ("–¢—ë–ø–ª—ã–π", "–≤ –µ–≥–æ –∫–æ–º–ø–∞–Ω–∏–∏ –≤—Å–µ–≥–¥–∞ —É—é—Ç–Ω–æ", "‚òï"),
    ("–¶–µ–ª–µ—É—Å—Ç—Ä–µ–º–ª—ë–Ω–Ω—ã–π", "–≤–∏–¥–∏—Ç —Ü–µ–ª—å –¥–∞–∂–µ —Å–∫–≤–æ–∑—å —Ç—É–º–∞–Ω", "üóª"),
    ("–ê–º–±–∏—Ü–∏–æ–∑–Ω—ã–π", "–º–µ—á—Ç–∞–µ—Ç –æ –º–Ω–æ–≥–æ–º –∏ –±–µ—Ä—ë—Ç —Å–≤–æ—ë", "üöÅ"),
    ("–ß—É–¥–∞–∫–æ–≤–∞—Ç—ã–π", "–Ω–µ –æ—Ç –º–∏—Ä–∞ —Å–µ–≥–æ ‚Äî –∏ –≤ —ç—Ç–æ–º –∫–∞–π—Ñ", "üß¶"),
    ("–ò–≥—Ä–∏–≤—ã–π", "—à—É—Ç–∏—Ç —Ç–∞–∫, —á—Ç–æ –Ω–µ –∑–Ω–∞–µ—à—å, —Å–µ—Ä—å—ë–∑–Ω–æ –ª–∏", "üôÉ"),
    ("–ó–ª–æ–ø–æ–ª—É—á–Ω—ã–π", "–ø—Ä–æ–±–ª–µ–º—ã —Å–∞–º–∏ –µ–≥–æ –Ω–∞—Ö–æ–¥—è—Ç", "üß≤üòÖ"),
    ("–ó–∞–±–æ—Ç–ª–∏–≤—ã–π", "—Å–ø—Ä–æ—Å–∏—Ç, –ø–æ–µ–ª –ª–∏ —Ç—ã ‚Äî 10 —Ä–∞–∑", "üç≤"),
    ("–ú—Å—Ç–∏—Ç–µ–ª—å–Ω—ã–π", "–Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –∑–∞–±—ã–≤–∞–µ—Ç –∏ –Ω–µ –ø—Ä–æ—â–∞–µ—Ç", "üßæüòà"),
    ("–†–∞—Å—Å—É–¥–∏—Ç–µ–ª—å–Ω—ã–π", "—Å–ø–æ–∫–æ–π–Ω–æ —Ä–∞–∑–ª–æ–∂–∏—Ç –≤—Å—ë –ø–æ –ø–æ–ª–æ—á–∫–∞–º", "üß†üóÇÔ∏è"),
    ("–ê–≤–∞–Ω—Ç—é—Ä–Ω—ã–π", "–∂–∏–∑–Ω—å –¥–ª—è –Ω–µ–≥–æ ‚Äî –≤–µ—á–Ω—ã–π –∫–≤–µ—Å—Ç", "üéí"),
    ("–°–∫–µ–ø—Ç–∏—á–Ω—ã–π", "–Ω–µ –≤–µ—Ä–∏—Ç, –ø–æ–∫–∞ —Å–∞–º –Ω–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç", "üìâ"),
    ("–ó–∞–ª–∏–ø–∞—Ç–µ–ª—å–Ω—ã–π", "–µ–≥–æ —Å–ª—É—à–∞—é—Ç, –∑–∞—Ç–∞–∏–≤ –¥—ã—Ö–∞–Ω–∏–µ", "üß≤üó®Ô∏è"),
    ("–¢–≤–æ—Ä—á–µ—Å–∫–∏–π", "–ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç –æ–±—ã–¥–µ–Ω–Ω–æ–µ –≤ –∏—Å–∫—É—Å—Å—Ç–≤–æ", "‚úèÔ∏è"),
    ("–°–ª–∞–¥–∫–æ–µ–∂–∫–∞", "–≥–æ–ª–æ—Å—É–µ—Ç –∑–∞ –¥–µ—Å–µ—Ä—Ç –≤ –ª—é–±–æ–º —Å–ø–æ—Ä–µ", "üç´"),
    ("–õ—é–±–æ–ø—ã—Ç–Ω—ã–π", "–≤–µ—á–Ω–æ –ª–µ–∑–µ—Ç —Ç—É–¥–∞, –≥–¥–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ", "ü™§"),
    ("–ú–æ–ª—á–∞–ª–∏–≤—ã–π", "–≥–æ–≤–æ—Ä–∏—Ç –º–∞–ª–æ ‚Äî –Ω–æ –ø–æ –¥–µ–ª—É", "üìµ"),
    ("–î—Ä–∞–º–∞—Ç–∏—á–Ω—ã–π", "–ø–µ—Ä–µ–∂–∏–≤–∞–µ—Ç –Ω–∞ —É—Ä–æ–≤–Ω–µ —Ç–µ–∞—Ç—Ä–∞", "üßµüé≠"),
    ("–°–∞–º–æ–∏—Ä–æ–Ω–∏—á–Ω—ã–π", "—Å–º–µ—ë—Ç—Å—è –Ω–∞–¥ —Å–æ–±–æ–π –≥—Ä–æ–º—á–µ –≤—Å–µ—Ö", "ü™ûüòÇ"),
    ("–õ–æ–≤–∫–∏–π", "–≤—ã–ø—É—Ç–∞–µ—Ç—Å—è –∏–∑ –ª—é–±–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏", "üêç"),
    ("–•–∏—Ç—Ä—ã–π", "–≤—Å–µ–≥–¥–∞ –Ω–∞–π–¥—ë—Ç –æ–±—Ö–æ–¥–Ω–æ–π –ø—É—Ç—å", "üéØ‚Ü©Ô∏è"),
    ("–ó–∞–±—ã–≤—á–∏–≤—ã–π", "–¥–µ—Ä–∂–∏—Ç –≤—Å—ë –≤ –≥–æ–ª–æ–≤–µ, –Ω–æ –Ω–µ –≤—Å–µ–≥–¥–∞ –Ω–∞–π–¥—ë—Ç", "üß†ü´†"),
    ("–ú–æ–¥–Ω—ã–π", "–∑–Ω–∞–µ—Ç —Ç—Ä–µ–Ω–¥—ã —Ä–∞–Ω—å—à–µ, —á–µ–º –æ–Ω–∏ —Å—Ç–∞–ª–∏ –º–æ–¥–æ–π", "üëü"),
    ("–†–∞—Å—Å–ª–∞–±–ª–µ–Ω–Ω—ã–π", "–Ω–µ –ø–∞—Ä–∏—Ç—Å—è –≤–æ–æ–±—â–µ –Ω–∏ –æ —á—ë–º", "üå¥"),
    ("–ë–µ—Å—Å—Ç—Ä–∞—à–Ω—ã–π", "–Ω–µ –∑–Ω–∞–µ—Ç, —á—Ç–æ —Ç–∞–∫–æ–µ ¬´–æ–ø–∞—Å–Ω–æ¬ª", "ü¶ç"),
    ("–°—Ç—Ä–∞—Ç–µ–≥–∏—á–Ω—ã–π", "–ø—Ä–æ—Å—á–∏—Ç—ã–≤–∞–µ—Ç –≤—Å—ë –∑–∞—Ä–∞–Ω–µ–µ", "üìã"),
    ("–û—Å—Ç—Ä–æ—É–º–Ω—ã–π", "–µ–≥–æ —Ñ—Ä–∞–∑—ã ‚Äî –∫–∞–∫ –∏—Å–∫—Ä—ã", "üí•"),
    ("–¢–µ—Ä–ø–µ–ª–∏–≤—ã–π", "–≤—ã–∂–∏–¥–∞–µ—Ç, –ø–æ–∫–∞ –º–∏—Ä —Å–∞–º —Å–¥–∞—Å—Ç—Å—è", "üßò‚Äç‚ôÇÔ∏è"),
    ("–ó–∞–±–∞–≤–Ω—ã–π", "–µ–≥–æ –ø—Ä–∏–∫–æ–ª—ã —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è –ª–µ–≥–µ–Ω–¥–∞–º–∏", "üóø"),
    ("–ù–µ—É–∫—Ä–æ—Ç–∏–º—ã–π", "–∏–¥—ë—Ç –Ω–∞–ø—Ä–æ–ª–æ–º ‚Äî –∏ —É–ª—ã–±–∞–µ—Ç—Å—è", "üöú"),
    ("–°–∫—Ä–æ–º–Ω—ã–π", "—Å–ø—Ä—è—á–µ—Ç—Å—è –∑–∞ –∑–∞–Ω–∞–≤–µ—Å–∫–æ–π, –¥–∞–∂–µ –µ—Å–ª–∏ –≥–µ—Ä–æ–π", "üé≠"),
    ("–¢–∞–π–Ω—ã–π", "–Ω–∏–∫—Ç–æ –Ω–µ –∑–Ω–∞–µ—Ç, —á—Ç–æ —É –Ω–µ–≥–æ –Ω–∞ —É–º–µ", "üß≥"),
    ("–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π", "—á—É–≤—Å—Ç–≤—É–µ—Ç –≤—Å—ë —Å—Ä–∞–∑—É ‚Äî –∏ —Å–∏–ª—å–Ω–æ", "üåã"),
    ("–°–ø–æ–∫–æ–π–Ω—ã–π", "–µ–≥–æ –Ω–µ —Ç—Ä–µ–≤–æ–∂–∏—Ç –¥–∞–∂–µ –∞–ø–æ–∫–∞–ª–∏–ø—Å–∏—Å", "üåå"),
    ("–ë–æ–ª—Ç–ª–∏–≤—ã–π", "—Ä–∞–∑–≥–æ–≤–æ—Ä ‚Äî –µ–≥–æ —Å—Ç–∏—Ö–∏—è", "üì£"),
    ("–¢—É—Å–æ–≤–æ—á–Ω—ã–π", "–≤—Å–µ–≥–¥–∞ –≤ —Ü–µ–Ω—Ç—Ä–µ —Å–æ–±—ã—Ç–∏–π", "üï∫"),
    ("–†–æ–º–∞–Ω—Ç–∏—á–Ω—ã–π —Ü–∏–Ω–∏–∫", "–ª—é–±–∏—Ç ‚Äî –Ω–æ —Å —Å–∞—Ä–∫–∞–∑–º–æ–º", "üñ§üåπ"),
    ("–ß–∏—Å—Ç—é–ª—è", "–∫–∞–∂–¥—É—é –ø—ã–ª–∏–Ω–∫—É –Ω–∞–∑–æ–≤—ë—Ç –ø–æ –∏–º–µ–Ω–∏", "üßº"),
    ("–†–∞–∑–¥—Ä–∞–∂–∏—Ç–µ–ª—å–Ω—ã–π", "–µ–≥–æ –±–µ—Å–∏—Ç –¥–∞–∂–µ —Ç–∏—à–∏–Ω–∞", "üîáüò†"),
    ("–§–∞–Ω—Ç–∞–∑—ë—Ä", "—Ä–∞—Å—Å–∫–∞–∂–µ—Ç –∏—Å—Ç–æ—Ä–∏—é, –≤ –∫–æ—Ç–æ—Ä—É—é —Å–∞–º –ø–æ—á—Ç–∏ –≤–µ—Ä–∏—Ç", "üßö‚Äç‚ôÇÔ∏è"),
    ("–ú–æ–ª—á–∞–ª–∏–≤—ã–π —Å—Ç—Ä–∞—Ç–µ–≥", "—Ç–∏—Ö–æ –¥–≤–∏–∂–µ—Ç—Å—è ‚Äî –Ω–æ —Ç–æ—á–Ω–æ", "üéØü§´"),
    ("–í–µ—á–Ω—ã–π —Å—Ç—É–¥–µ–Ω—Ç", "—É—á–∏—Ç—Å—è, –¥–∞–∂–µ –∫–æ–≥–¥–∞ —É–∂–µ –∑–Ω–∞–µ—Ç", "üìñüîÅ"),
    ("–£–≤–µ—Ä–µ–Ω–Ω—ã–π", "—à–∞–≥–∞–µ—Ç —Ç–∞–∫, –±—É–¥—Ç–æ –∑–Ω–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç", "üßç‚Äç‚ôÇÔ∏è‚ú®"),
    ("–°–æ–º–Ω–µ–≤–∞—é—â–∏–π—Å—è", "–≤—Å—ë –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞ —Ç—Ä–∏ —Ä–∞–∑–∞", "üîÑ"),
    ("–ù–µ–ø—Ä–µ–∫–ª–æ–Ω–Ω—ã–π", "–≥–Ω—ë—Ç—Å—è ‚Äî –Ω–æ –Ω–µ –ª–æ–º–∞–µ—Ç—Å—è", "ü™µ"),
    ("–ë–µ—Å–ø–æ–∫–æ–π–Ω—ã–π", "–¥—É–º–∞–µ—Ç –æ –≤—Å—ë–º —Å—Ä–∞–∑—É", "üéßüß†"),
    ("–í–µ–∑—É–Ω—á–∏–∫", "–ø–∞–¥–∞–µ—Ç –≤ –≥—Ä—è–∑—å ‚Äî –∏ –Ω–∞—Ö–æ–¥–∏—Ç –º–æ–Ω–µ—Ç—É", "üí´"),
    ("–ü–æ—Ñ–∏–≥–∏—Å—Ç", "–∂–∏–∑–Ω—å –∏–¥—ë—Ç ‚Äî –∏ –ª–∞–¥–Ω–æ", "üåä"),
    ("–û–±–∏–¥—á–∏–≤—ã–π", "–ø–æ–º–Ω–∏—Ç –æ–±–∏–¥—ã –ø–æ —Å–µ–∫—É–Ω–¥–∞–º", "üìÖüòø"),
    ("–û–±–∞—è—Ç–µ–ª—å–Ω—ã–π", "–æ–±–≤–æ—Ä–æ–∂–∏—Ç–µ–ª–µ–Ω –±–µ–∑ —É—Å–∏–ª–∏–π", "üòå"),
    ("–ú–µ–¥–ª–∏—Ç–µ–ª—å–Ω—ã–π", "–¥–≤–∏–∂–µ—Ç—Å—è –≤ —Å–≤–æ—ë–º —Ä–∏—Ç–º–µ", "‚è≥"),
    ("–û–¥–µ—Ä–∂–∏–º—ã–π –∏–¥–µ–µ–π", "–≥–æ—Ä–∏—Ç, –ø–æ–∫–∞ –Ω–µ —Å–≥–æ—Ä–∏—Ç", "üî•üìå"),
    ("–ò–Ω—Ç—É–∏—Ç–∏–≤–Ω—ã–π", "—á—É–≤—Å—Ç–≤—É–µ—Ç –æ—Ç–≤–µ—Ç—ã –±–µ–∑ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π", "üëÅÔ∏è‚Äçüó®Ô∏è"),
    ("–ó–∞–Ω—É–¥–Ω—ã–π", "–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –≤–∞–∂–Ω–µ–µ –≤–µ—Å–µ–ª—å—è", "üìë"),
    ("–°–∞–º —Å–µ–±–µ –ø—Ä–∞–∑–¥–Ω–∏–∫", "—Ö–æ–¥–∏—Ç —Å –∫–æ–Ω—Ñ–µ—Ç—Ç–∏ –≤ –∫–∞—Ä–º–∞–Ω–∞—Ö", "üéá"),
    ("–ü–∞—Ä–∞–Ω–æ–∏–∫", "–¥–∞–∂–µ –∑–µ—Ä–∫–∞–ª–æ –≤—ã–∑—ã–≤–∞–µ—Ç –ø–æ–¥–æ–∑—Ä–µ–Ω–∏—è", "üìπ"),
    ("–§–∞–Ω–∞—Ç–∏—á–Ω—ã–π", "–µ—Å–ª–∏ –≤–µ—Ä–∏—Ç ‚Äî —Ç–æ –¥–æ –∫–æ–Ω—Ü–∞", "üì£üî•"),
    ("–ü—Ä–∏—è—Ç–Ω—ã–π –≤–æ –≤—Å—ë–º", "–∫–∞–∫ –ø–ª–µ–¥ –≤ —Ö–æ–ª–æ–¥–Ω—ã–π –≤–µ—á–µ—Ä", "üß£"),
    ("–≠–º–ø–∞—Ç–∏—á–Ω—ã–π", "—á—É–≤—Å—Ç–≤—É–µ—Ç —Ç–≤–æ—ë –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ä–∞–Ω—å—à–µ —Ç–µ–±—è", "ü´∂"),
    ("–ü—Ä–∞–≥–º–∞—Ç–∏–∫", "–≤–∏–¥–∏—Ç –≤—ã–≥–æ–¥—É –¥–∞–∂–µ –≤ —á–∞–µ", "üíº‚òï"),
    ("–ê–ø–∞—Ç–∏—á–Ω—ã–π", "–Ω–µ –≤–æ–ª–Ω—É–µ—Ç –¥–∞–∂–µ —Ç–æ, —á—Ç–æ –¥–æ–ª–∂–Ω–æ", "üå´Ô∏è"),
    ("–û–±—Ö–æ–¥–∏—Ç–µ–ª—å–Ω—ã–π", "—É–ª—ã–±–Ω—ë—Ç—Å—è –¥–∞–∂–µ –≤ —Å–ø–æ—Ä–µ", "ü§ùüòÑ"),
    ("–ò–¥–µ–∞–ª–∏—Å—Ç", "–∏—â–µ—Ç —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ –¥–∞–∂–µ –≤ –¥–µ—Ç–∞–ª—è—Ö", "üìê"),
    ("–≠–∫—Å–ø—Ä–µ—Å—Å–∏–≤–Ω—ã–π", "–≥–æ–≤–æ—Ä–∏—Ç ‚Äî –∏ —Å—Ä–∞–∑—É —Å —ç–º–æ—Ü–∏–µ–π", "üéôÔ∏èüí•"),
    ("–ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É—é—â–∏–π", "–¥–µ—Ä–∂–∏—Ç –≤—Å—ë –ø–æ–¥ –ø–∞–ª—å—Ü–µ–º", "üìäüïπÔ∏è"),
    ("–ë—É–Ω—Ç–∞—Ä—å", "–ø—Ä–æ—Ç–∏–≤ –≤—Å–µ–≥–æ, –æ—Å–æ–±–µ–Ω–Ω–æ –ø—Ä–æ—Ç–∏–≤ —Å–∫—É–∫–∏", "üß®"),
    ("–ü—Ä–∞–∑–¥–Ω—ã–π", "–æ—Ç–¥—ã—Ö–∞–µ—Ç, –¥–∞–∂–µ –∫–æ–≥–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç", "üèñÔ∏è"),
    ("–ß–µ—Å—Ç–æ–ª—é–±–∏–≤—ã–π", "–º–µ—á—Ç–∞–µ—Ç –±—ã—Ç—å –ø–µ—Ä–≤—ã–º ‚Äî –≤—Å–µ–≥–¥–∞", "ü•á"),
    ("–ü–µ—Ä–µ–∂–∏–≤–∞—Ç–µ–ª—å–Ω—ã–π", "–≤–æ–ª–Ω—É–µ—Ç—Å—è –∑–∞ –≤—Å–µ—Ö –∏ –≤—Å—ë", "üí≠"),
    ("–ë—ã—Å—Ç—Ä–æ –∑–∞–≥–æ—Ä–∞–µ—Ç—Å—è", "–∏–¥–µ—è ‚Äî –∏ —É–∂–µ –≤ –¥–µ–π—Å—Ç–≤–∏–∏", "üö¥üí°"),
    ("–ë—ã–≤–∞–µ—Ç –≤ –æ–±–ª–∞–∫–∞—Ö", "—É–ª–µ—Ç–∞–µ—Ç –º—ã—Å–ª—è–º–∏ –≤–Ω–µ–∑–∞–ø–Ω–æ", "üå§Ô∏è"),
    ("–ù–µ—É–Ω—ã–≤–∞—é—â–∏–π", "–≤—Å–µ–≥–¥–∞ –Ω–∞–π–¥—ë—Ç –ø–æ–≤–æ–¥ –¥–ª—è —É–ª—ã–±–∫–∏", "üòÑ‚úåÔ∏è"),
    ("–ú–æ–ª—á–∞–ª–∏–≤—ã–π —Ñ–∏–ª–æ—Å–æ—Ñ", "–º–æ–ª—á–∏—Ç —Ç–∞–∫, —á—Ç–æ –≤—Å—ë –ø–æ–Ω—è—Ç–Ω–æ", "üìú"),
    ("–ë–µ—Å–ø—Ä–µ–¥–µ–ª—å–Ω–æ –¥–æ–±—Ä—ã–π", "–æ–±–Ω–∏–º–µ—Ç –¥–∞–∂–µ –≤–æ—Ä–æ–±—å—è", "üïäÔ∏èüíõ"),
    ("–°–º–µ–ª—ã–π", "–Ω–µ –±–æ–∏—Ç—Å—è –±—ã—Ç—å –ø–µ—Ä–≤—ã–º", "ü¶Å"),
    ("–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π", "–≤—Å–µ–≥–¥–∞ –ø—Ä–æ—Ç—è–Ω–µ—Ç —Ä—É–∫—É –ø–æ–º–æ—â–∏", "ü§ù"),
    ("–ó–∞–≥–∞–¥–æ—á–Ω—ã–π", "–≤—Å–µ–≥–¥–∞ —Å —Ç–∞–π–Ω–æ–π —É–ª—ã–±–∫–æ–π", "üïµÔ∏è"),
    ("–í–µ—Å—ë–ª—ã–π", "–µ–≥–æ —Å–º–µ—Ö –∑–∞—Ä–∞–∑–∏—Ç–µ–ª–µ–Ω", "üòÇ"),
    ("–¢—Ä—É–¥–æ–ª—é–±–∏–≤—ã–π", "—Ä–∞–±–æ—Ç–∞–µ—Ç, –ø–æ–∫–∞ –¥—Ä—É–≥–∏–µ –æ—Ç–¥—ã—Ö–∞—é—Ç", "üõ†Ô∏è"),
    ("–ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–π", "–¥—É–º–∞–µ—Ç –≤–Ω–µ –∫–æ—Ä–æ–±–∫–∏", "üé®"),
    ("–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π", "–≤—Å–µ–≥–¥–∞ –Ω–∞–π–¥—ë—Ç –ª–æ–≥–∏—á–Ω—ã–π –æ—Ç–≤–µ—Ç", "üß†"),
    ("–≠–Ω–µ—Ä–≥–∏—á–Ω—ã–π", "–Ω–µ —É–º–µ–µ—Ç —Å–∏–¥–µ—Ç—å –Ω–∞ –º–µ—Å—Ç–µ", "‚ö°"),
    ("–ú—É–¥—Ä—ã–π", "—Å–ª–æ–≤–∞ –µ–≥–æ ‚Äî –∫–∞–∫ –ø–æ—Å–ª–æ–≤–∏—Ü—ã", "üßô‚Äç‚ôÇÔ∏è"),
    ("–ù–µ–ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º—ã–π", "–µ–≥–æ –ø–æ—Å—Ç—É–ø–∫–∏ ‚Äî –∫–∞–∫ —Ñ–µ–π–µ—Ä–≤–µ—Ä–∫", "üé≤"),
    ("–û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã–π", "–¥–∞–∂–µ –≤ –ª—É–∂–∞—Ö –≤–∏–¥–∏—Ç –æ—Ç—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–ª–Ω—Ü–∞", "‚òÄÔ∏è"),
    ("–ß–µ—Å—Ç–Ω—ã–π", "–Ω–µ —É–º–µ–µ—Ç –≤—Ä–∞—Ç—å, –¥–∞–∂–µ –≤–æ –≤—Ä–µ–¥ —Å–µ–±–µ", "üèÖ"),
    ("–°–∫—Ä–æ–º–Ω—ã–π", "–Ω–µ –≥–æ–Ω–∏—Ç—Å—è –∑–∞ –≤–Ω–∏–º–∞–Ω–∏–µ–º", "üòá"),
    ("–ó–ª–æ–ø–∞–º—è—Ç–Ω—ã–π", "–≤ –µ–≥–æ –±–ª–æ–∫–Ω–æ—Ç–µ –µ—Å—Ç—å —Å–ø–∏—Å–æ–∫", "üò°"),
    ("–ü–∞–Ω–∏–∫—ë—Ä", "–∫—Ä–∏—á–∏—Ç ¬´–≤—Å—ë –ø—Ä–æ–ø–∞–ª–æ!¬ª –ø–µ—Ä–≤—ã–º", "üö®"),
    ("–õ–µ–Ω–∏–≤—ã–π", "–¥–≤–∏–∂–µ–Ω–∏–µ ‚Äî –Ω–µ –µ–≥–æ —Å—Ç–∏—Ö–∏—è", "üõãÔ∏è"),
    ("–ù–µ—Ä–≤–Ω—ã–π", "–¥–µ—Ä–≥–∞–µ—Ç—Å—è, –¥–∞–∂–µ –∫–æ–≥–¥–∞ –≤—Å—ë —Å–ø–æ–∫–æ–π–Ω–æ", "üò¨"),
    ("–¢—É–ø–æ–≤–∞—Ç—ã–π", "–≤–æ–ø—Ä–æ—Å—ã –∑–∞–¥–∞—ë—Ç ‚Äî –Ω–æ –∏—Å–∫—Ä–µ–Ω–Ω–µ", "üêë"),
    ("–ó–∞–≤–∏—Å—Ç–ª–∏–≤—ã–π", "—Ö–æ—á–µ—Ç —Ç–æ –∂–µ, —á—Ç–æ —É –¥—Ä—É–≥–∏—Ö", "üëÄ"),
    ("–≠–≥–æ–∏—Å—Ç–∏—á–Ω—ã–π", "—Å—Ç–∞–≤–∏—Ç —Å–µ–±—è –Ω–∞ –ø–µ—Ä–≤–æ–µ –º–µ—Å—Ç–æ", "üôÉ"),
    ("–ú–µ–ª–∞–Ω—Ö–æ–ª–∏—á–Ω—ã–π", "–Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∞ –æ—Å–µ–Ω–Ω—é—é –≤–æ–ª–Ω—É", "üåô"),
    ("–§–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–π", "—Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç ¬´–∑–∞—á–µ–º –≤—Å—ë —ç—Ç–æ?¬ª", "ü§î"),
    ("–•–≤–∞—Å—Ç–ª–∏–≤—ã–π", "–ª—é–±–∏—Ç –≥–æ–≤–æ—Ä–∏—Ç—å –æ —Å–µ–±–µ –≤ —Ç—Ä–µ—Ç—å–µ–º –ª–∏—Ü–µ", "üí™"),
    ("–°–ª–∏—à–∫–æ–º –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π", "–¥–∞–∂–µ —á–∞–π–Ω–∏–∫ –≤—ã–∑—ã–≤–∞–µ—Ç —Å–æ–º–Ω–µ–Ω–∏—è", "üëÄ"),
    ("–†–æ–º–∞–Ω—Ç–∏—á–Ω—ã–π", "—Å–º–æ—Ç—Ä–∏—Ç –Ω–∞ –º–∏—Ä —á–µ—Ä–µ–∑ —Å–µ—Ä–¥–µ—á–∫–∏", "üåÖ"),
    ("–¶–∏–Ω–∏—á–Ω—ã–π", "–Ω–µ –≤–µ—Ä–∏—Ç –≤ –¥–æ–±—Ä—ã–µ –Ω–∞–º–µ—Ä–µ–Ω–∏—è", "üß©"),
    ("–°–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–π", "–≥–æ–≤–æ—Ä–∏—Ç –æ–¥–Ω–æ, –∞ –¥—É–º–∞–µ—Ç –¥—Ä—É–≥–æ–µ", "üó°Ô∏è"),
    ("–î–æ–±—Ä—ã–π", "–≥–æ—Ç–æ–≤ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–º", "üß∏"),
    ("–ù–∞–¥—ë–∂–Ω—ã–π", "–¥–µ—Ä–∂–∏—Ç —Å–ª–æ–≤–æ –ø—Ä–∏ –ª—é–±–æ–π –ø–æ–≥–æ–¥–µ", "üõ°Ô∏è"),
    ("–°–æ–Ω–Ω—ã–π", "–≤—Å–µ–≥–¥–∞ –≤ —Ä–µ–∂–∏–º–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏", "üò¥"),
    ("–ü—Ä—è–º–æ–ª–∏–Ω–µ–π–Ω—ã–π", "–Ω–µ —É–º–µ–µ—Ç —Å–≥–ª–∞–∂–∏–≤–∞—Ç—å —É–≥–ª—ã", "ü™ì"),
    ("–ë–µ–∑–±–∞—à–µ–Ω–Ω—ã–π", "–ª—é–±–∏—Ç —Ä–∏—Å–∫ –±–æ–ª—å—à–µ, —á–µ–º —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å", "üé¢"),
    ("–ú–µ—á—Ç–∞—Ç–µ–ª—å–Ω—ã–π", "—Å—Ç—Ä–æ–∏—Ç –≤–æ–∑–¥—É—à–Ω—ã–µ –∑–∞–º–∫–∏", "‚òÅÔ∏è"),
    ("–†–µ–∞–ª–∏—Å—Ç", "–Ω–µ —Å—Ç—Ä–æ–∏—Ç –∏–ª–ª—é–∑–∏–π", "üîç"),
    ("–ü–µ–¥–∞–Ω—Ç–∏—á–Ω—ã–π", "–≤—Å—ë –ø–æ –ø–ª–∞–Ω—É, –∏ —Ç–æ—á–∫–∞", "üßº"),
    ("–ì–∏–ø–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π", "–¥–∞–∂–µ —Ç–µ–Ω—å –æ—Ç –Ω–µ–≥–æ –Ω–µ —É—Å–ø–µ–≤–∞–µ—Ç", "ü¶ø"),
    ("–°–ø–æ–Ω—Ç–∞–Ω–Ω—ã–π", "–ø–ª–∞–Ω–∏—Ä—É–µ—Ç –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–æ–º–µ–Ω—Ç", "üí°"),
    ("–•–æ–ª–æ–¥–Ω—ã–π", "—ç–º–æ—Ü–∏–∏ ‚Äî –Ω–µ –µ–≥–æ —Å—Ç–∏–ª—å", "üßä"),
    ("–¢—ë–ø–ª—ã–π", "–∏–∑–ª—É—á–∞–µ—Ç —É—é—Ç –¥–∞–∂–µ –≤ —Å–ª–æ–≤–∞—Ö", "üî•"),
    ("–¶–µ–ª–µ—É—Å—Ç—Ä–µ–º–ª—ë–Ω–Ω—ã–π", "–∑–Ω–∞–µ—Ç, –∫—É–¥–∞ –∏–¥—ë—Ç, –∏ –∏–¥—ë—Ç —Ç—É–¥–∞", "üéØ"),
    ("–ê–º–±–∏—Ü–∏–æ–∑–Ω—ã–π", "—Å—Ç–∞–≤–∏—Ç –≤—ã—Å–æ–∫—É—é –ø–ª–∞–Ω–∫—É", "üåç"),
    ("–ß—É–¥–∞–∫–æ–≤–∞—Ç—ã–π", "–Ω–µ —Ç–∞–∫–æ–π –∫–∞–∫ –≤—Å–µ ‚Äî –∏ –≥–æ—Ä–¥ —ç—Ç–∏–º", "üõ∏"),
    ("–ò–≥—Ä–∏–≤—ã–π", "–≤—Å–µ–≥–¥–∞ –Ω–∞–π–¥–µ—Ç –ø–æ–≤–æ–¥ –¥–ª—è —à–∞–ª–æ—Å—Ç–∏", "üòº"),
    ("–ó–ª–æ–ø–æ–ª—É—á–Ω—ã–π", "–ø—Ä–æ–±–ª–µ–º—ã –ª–∏–ø–Ω—É—Ç —Å–∞–º–∏", "ü™§"),
    ("–ó–∞–±–æ—Ç–ª–∏–≤—ã–π", "–≤—Å–µ–≥–¥–∞ —É–∑–Ω–∞–µ—Ç, –∫–∞–∫ —Ç—ã —Å–ø–∞–ª", "üçµ"),
    ("–ú—Å—Ç–∏—Ç–µ–ª—å–Ω—ã–π", "–ø–æ–º–Ω–∏—Ç –≤—Å—ë... –∏ –∫–æ–≥–¥–∞ –≤–µ—Ä–Ω—ë—Ç—Å—è", "üìÖ"),
    ("–†–∞—Å—Å—É–¥–∏—Ç–µ–ª—å–Ω—ã–π", "–Ω–µ –¥–µ–ª–∞–µ—Ç —à–∞–≥ –±–µ–∑ –∞–Ω–∞–ª–∏–∑–∞", "üìò"),
    ("–ê–≤–∞–Ω—Ç—é—Ä–Ω—ã–π", "–ª—é–±–∏—Ç —Ä–∏—Å–∫–æ–≤–∞—Ç—å —Ä–∞–¥–∏ –∏–Ω—Ç–µ—Ä–µ—Å–∞", "üéÆ"),
    ("–°–∫–µ–ø—Ç–∏—á–Ω—ã–π", "–≤—Å–µ–≥–¥–∞ –∏—â–µ—Ç –ø–æ–¥–≤–æ—Ö", "üßê"),
    ("–ó–∞–ª–∏–ø–∞—Ç–µ–ª—å–Ω—ã–π", "—Ç—Ä—É–¥–Ω–æ –æ—Ç–æ—Ä–≤–∞—Ç—å—Å—è, –∫–æ–≥–¥–∞ –æ–Ω —Ä—è–¥–æ–º", "üåÄ"),
    ("–¢–≤–æ—Ä—á–µ—Å–∫–∏–π", "—Ñ–∞–Ω—Ç–∞–∑–∏—è –±—å—ë—Ç —á–µ—Ä–µ–∑ –∫—Ä–∞–π", "üéÜ"),
    ("–°–ª–∞–¥–∫–æ–µ–∂–∫–∞", "–∂–∏–∑–Ω—å –±–µ–∑ —à–æ–∫–æ–ª–∞–¥–∞ ‚Äî –Ω–µ –∂–∏–∑–Ω—å", "üç∞"),
    ("–õ—é–±–æ–ø—ã—Ç–Ω—ã–π", "–µ–º—É –≤—Å—ë –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ –¥–æ –º–µ–ª–æ—á–µ–π", "üîé"),
    ("–ú–æ–ª—á–∞–ª–∏–≤—ã–π", "–≥–æ–≤–æ—Ä–∏—Ç –≥–ª–∞–∑–∞–º–∏", "ü§´"),
    ("–î—Ä–∞–º–∞—Ç–∏—á–Ω—ã–π", "–∏–∑ –º—É—Ö–∏ —Å–¥–µ–ª–∞–µ—Ç —Ç—Ä–∞–≥–µ–¥–∏—é", "üé≠"),
    ("–°–∞–º–æ–∏—Ä–æ–Ω–∏—á–Ω—ã–π", "—Å–º–µ—ë—Ç—Å—è –Ω–∞–¥ —Å–æ–±–æ–π –∏—Å–∫—Ä–µ–Ω–Ω–µ", "ü™û"),
    ("–õ–æ–≤–∫–∏–π", "–≤—Å–µ–≥–¥–∞ –≤—ã–∫—Ä—É—Ç–∏—Ç—Å—è, –¥–∞–∂–µ –∏–∑ —É–∑–ª–∞", "ü§π"),
    ("–•–∏—Ç—Ä—ã–π", "–æ–±–æ–π–¥—ë—Ç –ø—Ä–æ–±–ª–µ–º—É —Å—Ç–æ—Ä–æ–Ω–æ–π", "ü¶ä"),
    ("–ó–∞–±—ã–≤—á–∏–≤—ã–π", "–≤–µ—á–Ω–æ –∏—â–µ—Ç, —á—Ç–æ —Ç–æ–ª—å–∫–æ —á—Ç–æ –¥–µ—Ä–∂–∞–ª", "üß†‚ùå"),
    ("–ú–æ–¥–Ω—ã–π", "—Å–ª–µ–¥–∏—Ç –∑–∞ —Ç—Ä–µ–Ω–¥–∞–º–∏ –¥–∞–∂–µ –≤–æ —Å–Ω–µ", "üï∂Ô∏è"),
    ("–†–∞—Å—Å–ª–∞–±–ª–µ–Ω–Ω—ã–π", "–¥–∞–∂–µ –≤ –ø–∞–Ω–∏–∫–µ –∑–µ–≤–∞–µ—Ç", "üõÄ"),
    ("–ë–µ—Å—Å—Ç—Ä–∞—à–Ω—ã–π", "–∏–¥—ë—Ç —Ç—É–¥–∞, –≥–¥–µ —Å—Ç—Ä–∞—à–Ω–æ –≤—Å–µ–º", "ü¶á"),
    ("–°—Ç—Ä–∞—Ç–µ–≥–∏—á–Ω—ã–π", "–ø—Ä–æ—Å—á–∏—Ç—ã–≤–∞–µ—Ç –Ω–∞ –¥–µ—Å—è—Ç—å —à–∞–≥–æ–≤ –≤–ø–µ—Ä—ë–¥", "‚ôüÔ∏è"),
    ("–û—Å—Ç—Ä–æ—É–º–Ω—ã–π", "–µ–≥–æ —Ñ—Ä–∞–∑–æ—á–∫–∏ —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è –º–µ–º–∞–º–∏", "üí¨"),
    ("–¢–µ—Ä–ø–µ–ª–∏–≤—ã–π", "–∂–¥—ë—Ç, –∫–æ–≥–¥–∞ –∫–∞–∫—Ç—É—Å –∑–∞—Ü–≤–µ—Ç—ë—Ç", "‚è≥"),
    ("–ó–∞–±–∞–≤–Ω—ã–π", "—É–ª—ã–±–∫–∞ –ø–æ—è–≤–ª—è–µ—Ç—Å—è —Å–∞–º–∞", "ü§£"),
    ("–ù–µ—É–∫—Ä–æ—Ç–∏–º—ã–π", "–Ω–∏ –≤ –∫–ª–µ—Ç–∫—É, –Ω–∏ –≤ —Ä–∞–º–∫–∏", "üå™Ô∏è"),
    ("–°–∫—Ä–æ–º–Ω—ã–π", "–¥–µ—Ä–∂–∏—Ç—Å—è –≤ —Å—Ç–æ—Ä–æ–Ω–µ, –Ω–æ –¥–µ–ª–∞–µ—Ç –º–Ω–æ–≥–æ", "üôà"),
    ("–¢–∞–π–Ω—ã–π", "–æ –Ω—ë–º –≤—Å–µ–≥–¥–∞ –æ—Å—Ç–∞—é—Ç—Å—è –≤–æ–ø—Ä–æ—Å—ã", "üé≠"),
    ("–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π", "–≤—Å–µ —á—É–≤—Å—Ç–≤–∞ ‚Äî –Ω–∞ –ª–∏—Ü–µ", "üåä"),
    ("–°–ø–æ–∫–æ–π–Ω—ã–π", "–¥–∞–∂–µ —à—Ç–æ—Ä–º –µ–≥–æ –Ω–µ –∫–æ–ª—ã—à–µ—Ç", "üêû"),
    ("–ë–æ–ª—Ç–ª–∏–≤—ã–π", "–ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –Ω–∞ –º–æ–Ω–æ–ª–æ–≥ –ø–æ—Å–ª–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è", "üó£Ô∏è"),
    ("–¢—É—Å–æ–≤–æ—á–Ω—ã–π", "–∑–Ω–∞–µ—Ç, –≥–¥–µ –≤–µ—á–µ—Ä–∏–Ω–∫–∞ –µ—â—ë –¥–æ –Ω–∞—á–∞–ª–∞", "üéâ"),
    ("–†–æ–º–∞–Ω—Ç–∏—á–Ω—ã–π —Ü–∏–Ω–∏–∫", "–ª—é–±–∏—Ç, –Ω–æ –±–µ–∑ –∏–ª–ª—é–∑–∏–π", "üåπüòè"),
    ("–ß–∏—Å—Ç—é–ª—è", "—Ç—Ä—è–ø–∫–∞ ‚Äî –µ–≥–æ –ª—É—á—à–∏–π –¥—Ä—É–≥", "üßΩ"),
    ("–†–∞–∑–¥—Ä–∞–∂–∏—Ç–µ–ª—å–Ω—ã–π", "–¥–∞–∂–µ —Ç–∏—à–∏–Ω–∞ –µ–≥–æ –±–µ—Å–∏—Ç", "üì∂üò†"),
    ("–§–∞–Ω—Ç–∞–∑—ë—Ä", "–µ–≥–æ –º—ã—Å–ª–∏ ‚Äî –∫–∞–∫ —Ñ–∏–ª—å–º—ã –±–µ–∑ –±—é–¥–∂–µ—Ç–∞", "üìñ‚ú®"),
    ("–ú–æ–ª—á–∞–ª–∏–≤—ã–π —Å—Ç—Ä–∞—Ç–µ–≥", "—Ç–∏—Ö–æ —Å—Ç—Ä–æ–∏—Ç –∏–º–ø–µ—Ä–∏–∏", "üßä‚ôüÔ∏è"),
    ("–í–µ—á–Ω—ã–π —Å—Ç—É–¥–µ–Ω—Ç", "—É—á–∏—Ç—Å—è, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º —Å–Ω–æ–≤–∞ —É—á–∏—Ç—å—Å—è", "üìö"),
    ("–£–≤–µ—Ä–µ–Ω–Ω—ã–π", "–≤—Ö–æ–¥–∏—Ç –∫–∞–∫ —Ö–æ–∑—è–∏–Ω", "üï¥Ô∏è"),
    ("–°–æ–º–Ω–µ–≤–∞—é—â–∏–π—Å—è", "–≤—Å—ë –µ—â—ë —Ä–µ—à–∞–µ—Ç, —á—Ç–æ –Ω–∞–¥–µ—Ç—å", "ü§∑"),
    ("–ù–µ–ø—Ä–µ–∫–ª–æ–Ω–Ω—ã–π", "–Ω–µ —Å–æ–≥–Ω—ë—Ç—Å—è –¥–∞–∂–µ –ø–æ–¥ –¥–∞–≤–ª–µ–Ω–∏–µ–º", "ü™®"),
    ("–ë–µ—Å–ø–æ–∫–æ–π–Ω—ã–π", "–≤ –≥–æ–ª–æ–≤–µ ‚Äî –≤–µ—á–Ω—ã–π —à—Ç–æ—Ä–º", "üåÄ"),
    ("–í–µ–∑—É–Ω—á–∏–∫", "—É–¥–∞—á–∞ –≤—Å–µ–≥–¥–∞ —Å –Ω–∏–º –Ω–∞ —Å–≤—è–∑–∏", "üçÄ"),
    ("–ü–æ—Ñ–∏–≥–∏—Å—Ç", "–ø–ª—ã–≤—ë—Ç –ø–æ —Ç–µ—á–µ–Ω–∏—é ‚Äî –∏ –∫–∞–π—Ñ—É–µ—Ç", "üßò"),
    ("–û–±–∏–¥—á–∏–≤—ã–π", "–≤ –æ–±–∏–¥–∞—Ö ‚Äî —á–µ–º–ø–∏–æ–Ω –º–∏—Ä–∞", "üì±üíî"),
    ("–û–±–∞—è—Ç–µ–ª—å–Ω—ã–π", "—É–ª—ã–±–∫–∞ ‚Äî –µ–≥–æ —Å—É–ø–µ—Ä—Å–∏–ª–∞", "üòä"),
    ("–ú–µ–¥–ª–∏—Ç–µ–ª—å–Ω—ã–π", "–∏–¥—ë—Ç, –Ω–æ –∫—Ä–∞—Å–∏–≤–æ", "üê¢"),
    ("–û–¥–µ—Ä–∂–∏–º—ã–π –∏–¥–µ–µ–π", "–Ω–µ –µ—Å—Ç, –ø–æ–∫–∞ –Ω–µ –¥–æ–¥–µ–ª–∞–µ—Ç", "üéØüî•"),
    ("–ò–Ω—Ç—É–∏—Ç–∏–≤–Ω—ã–π", "—É–≥–∞–¥–∞–µ—Ç, —á—Ç–æ —Ç—ã —Å–∫–∞–∂–µ—à—å", "üîÆüçï"),
    ("–ó–∞–Ω—É–¥–Ω—ã–π", "–Ω–∞–ø–æ–º–∏–Ω–∞–µ—Ç –æ –ø—Ä–∞–≤–∏–ª–∞—Ö –¥–∞–∂–µ –≤ –≤—ã—Ö–æ–¥–Ω–æ–π", "üìè"),
    ("–°–∞–º —Å–µ–±–µ –ø—Ä–∞–∑–¥–Ω–∏–∫", "–≤–µ—Å—ë–ª –±–µ–∑ –ø–æ–≤–æ–¥–∞", "üéä"),
    ("–ü–∞—Ä–∞–Ω–æ–∏–∫", "–∏ –∑–µ—Ä–∫–∞–ª–æ –∑–∞–∫–ª–µ–∏–ª", "üéôÔ∏èüò≥"),
    ("–§–∞–Ω–∞—Ç–∏—á–Ω—ã–π", "–≤—Å—ë —Ä–∞–¥–∏ —Ü–µ–ª–∏", "üí£"),
    ("–ü—Ä–∏—è—Ç–Ω—ã–π –≤–æ –≤—Å—ë–º", "—Ö–æ—á–µ—Ç—Å—è –æ–±–Ω—è—Ç—å –ø—Ä–æ—Å—Ç–æ —Ç–∞–∫", "üåµ‚ù§Ô∏è"),
    ("–≠–º–ø–∞—Ç–∏—á–Ω—ã–π", "–ø–ª–∞—á–µ—Ç –Ω–∞ —á—É–∂–∏—Ö —Ñ–∏–ª—å–º–∞—Ö", "ü§ùüíû"),
    ("–ü—Ä–∞–≥–º–∞—Ç–∏–∫", "–º–µ—á—Ç–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ", "üìà"),
    ("–ê–ø–∞—Ç–∏—á–Ω—ã–π", "–¥–∞–∂–µ –Ω–æ–≤–æ—Å—Ç–∏ –Ω–µ —Ç—Ä–æ–≥–∞—é—Ç", "üõå"),
    ("–û–±—Ö–æ–¥–∏—Ç–µ–ª—å–Ω—ã–π", "–¥–∞–∂–µ —Å–ø–æ—Ä –≤–µ–¥—ë—Ç –≤–µ–∂–ª–∏–≤–æ", "ü§ó"),
    ("–ò–¥–µ–∞–ª–∏—Å—Ç", "–º–µ—á—Ç–∞–µ—Ç –æ –º–∏—Ä–µ –±–µ–∑ –æ—à–∏–±–æ–∫", "üé¨"),
    ("–≠–∫—Å–ø—Ä–µ—Å—Å–∏–≤–Ω—ã–π", "—ç–º–æ—Ü–∏–∏ ‚Äî –µ–≥–æ —è–∑—ã–∫", "üëê"),
    ("–ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É—é—â–∏–π", "–Ω–µ —Å–ø–∏—Ç, –ø–æ–∫–∞ –Ω–µ –≤—Å—ë –ø–æ –ø–ª–∞–Ω—É", "üéõÔ∏è"),
    ("–ë—É–Ω—Ç–∞—Ä—å", "–¥–µ–ª–∞–µ—Ç –ø–æ-—Å–≤–æ–µ–º—É ‚Äî –∏ —Ç–æ—á–∫–∞", "üö´üî•"),
    ("–ü—Ä–∞–∑–¥–Ω—ã–π", "–≤ –æ—Ç–¥—ã—Ö–µ ‚Äî –º–∞—Å—Ç–µ—Ä", "üçπ"),
    ("–ß–µ—Å—Ç–æ–ª—é–±–∏–≤—ã–π", "–≤–∏–¥–∏—Ç —Ü–µ–ª—å ‚Äî –Ω–µ –≤–∏–¥–∏—Ç –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π", "ü•á"),
    ("–ü–µ—Ä–µ–∂–∏–≤–∞—Ç–µ–ª—å–Ω—ã–π", "–≤–æ–ª–Ω—É–µ—Ç—Å—è –¥–∞–∂–µ –∑–∞ –∫–æ—Ç–∞ —Å–æ—Å–µ–¥–∞", "ü™êüòü"),
    ("–ë—ã—Å—Ç—Ä–æ –∑–∞–≥–æ—Ä–∞–µ—Ç—Å—è", "–æ–¥–Ω–∞ –º—ã—Å–ª—å ‚Äî –∏ –æ–Ω —É–∂–µ –≤ –¥–µ–ª–µ", "‚ö°üß†"),
    ("–ë—ã–≤–∞–µ—Ç –≤ –æ–±–ª–∞–∫–∞—Ö", "–º–µ—á—Ç–∞–µ—Ç, –¥–∞–∂–µ —Å—Ç–æ—è –≤ –ø—Ä–æ–±–∫–µ", "‚òÅÔ∏èüëÄ"),
    ("–ù–µ—É–Ω—ã–≤–∞—é—â–∏–π", "—Å–º–µ—ë—Ç—Å—è —Å–∫–≤–æ–∑—å —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏", "üí™üôÇ"),
    ("–ú–æ–ª—á–∞–ª–∏–≤—ã–π —Ñ–∏–ª–æ—Å–æ—Ñ", "–º–æ–ª—á–∏—Ç ‚Äî –Ω–æ —Å —Å–º—ã—Å–ª–æ–º", "üååü§´"),
    ("–ë–µ—Å–ø—Ä–µ–¥–µ–ª—å–Ω–æ –¥–æ–±—Ä—ã–π", "–æ–±–Ω–∏–º–µ—Ç –¥–∞–∂–µ —ë–∂–∏–∫–∞", "üêûüçû"),
]

# –ò–∑–Ω–∞—á–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã /–∏–Ω—Ñ–æ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º HTML —Ä–∞–∑–º–µ—Ç–∫–∏
info_text = (
    "‚ÑπÔ∏è <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:</b>\n\n"
    "ü§ñ   <b>BotName</b> - observer_nautriks\n"
    "üìÖ <b>–í–µ—Ä—Å–∏—è:</b> 3.2\n"
    "üë®‚Äçüíª <b>–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫:</b> @nautriks\n"
    "\n"
    "<b>–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>\n"
    "- üîî –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
    "- üö´ –ú–æ–¥–µ—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π (—Ü–µ–Ω–∑—É—Ä–∞ –∏ –º—É—Ç—ã)\n"
    "- üì¢ –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–±–∞–Ω, –∫–∏–∫, –º—É—Ç)\n"
    "- üßπ –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π\n"
    "- üòÇ –°–ª—É—á–∞–π–Ω—ã–µ –∞–Ω–µ–∫–¥–æ—Ç—ã\n"
    "- üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–≤—Å–µ–≥–æ, –æ–Ω–ª–∞–π–Ω, –∞–¥–º–∏–Ω—ã)\n"
    "- ‚è∞ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —Å –≤—ã–±–æ—Ä–æ–º –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –∏ –≤—Ä–µ–º–µ–Ω–∏\n"
    "\n"
    "<b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
    "- üéâ –†–µ–∞–∫—Ü–∏—è –±–æ—Ç–∞ –Ω–∞ –∫–∞–∂–¥–æ–µ 150-–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
    "- üì© –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç –∏ –ª–∏—á–Ω—ã–µ –æ—Ç –ª–∏—Ü–∞ –±–æ—Ç–∞\n"
    "\n"
    "üí° –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É - <b>@nautriks</b>\n"
    "‚ú® –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞!"
)

word_list = [
        "–∞–≤—Ç–æ–º–æ–±–∏–ª—å", "–±–∞–Ω–∞–Ω", "–≤–µ–ª–æ—Å–∏–ø–µ–¥", "–≥—Ä—É–∑–æ–≤–∏–∫", "–¥–µ—Ä–µ–≤–æ", "–µ–∂–µ–≤–∏–∫–∞", "–∂–∏—Ä–∞—Ñ", "–∑–µ–±—Ä–∞", "–∏–≥—Ä—É—à–∫–∞", "–π–æ–≥—É—Ä—Ç", "–∫–∞—Ä–∞–Ω–¥–∞—à",
        "–ª–∞–º–ø–∞", "–º–æ–ª–æ–∫–æ", "–Ω–æ—Å–æ—Ä–æ–≥", "–æ–±–ª–∞–∫–æ", "–ø–∏–Ω–≥–≤–∏–Ω", "—Ä–∞–¥—É–≥–∞", "—Å–æ–±–∞–∫–∞", "—Ç–µ–ª–µ—Ñ–æ–Ω", "—É–ª–∏—Ç–∫–∞", "—Ñ–ª–∞–º–∏–Ω–≥–æ", "—Ö–æ–º—è–∫", "—á–µ—Ä–µ–ø–∞—Ö–∞",
        "—à–æ–∫–æ–ª–∞–¥", "—è–±–ª–æ–∫–æ", "–∞–º—Ñ–∏–±–∏—è", "–±–∞–ª–∫–æ–Ω", "–≤–µ—Ç–µ—Ä", "–≥–∏—Ç–∞—Ä–∞", "–¥–≤–∏–≥–∞—Ç–µ–ª—å", "–µ–ª–∫–∞", "–∂–µ–º—á—É–≥", "–∑–∞–º–æ–∫", "–∏–≥–ª—É", "–∫–∞–ø–∏—Ç–∞–Ω",
        "–ª–∏—Ñ—Ç", "–º–∞–ª—è—Ä", "–Ω–µ–±–æ", "–æ—Ä–µ–ª", "–ø–µ—Å–æ–∫", "—Ä–æ–º–∞—à–∫–∞", "—Å–Ω–µ–≥", "—Ç—Ä–æ–ª–ª–µ–π–±—É—Å", "—É–ª–µ–π", "—Ñ–æ—Ç–æ–∞–ø–ø–∞—Ä–∞—Ç", "—Ö–ª–µ–±", "—á–∞—Å–æ–≤–Ω—è",
        "—à–ª—è–ø–∞", "—è—Ä–ª—ã–∫", "–∞–∫–≤–∞—Ä–µ–ª—å", "–±–∞–±–æ—á–∫–∞", "–≤–µ–Ω–∏–∫", "–≥–æ–ª—É–±—å", "–¥–æ–º", "–µ–ª–æ—á–∫–∞", "–∂—É–∫", "–∑–∞–π–∫–∞", "–∏–≥–ª–∞", "–∫–∞–ª–µ–Ω–¥–∞—Ä—å", "–ª–∏—Å–∞",
        "–º–µ–¥–≤–µ–¥—å", "–Ω–µ—Ñ—Ç—å", "–æ–±—É–≤—å", "–ø–∞—Ä—É—Å", "—Ä–∞–∫–µ—Ç–∞", "—Å–æ–ª–Ω—Ü–µ", "—Ç—É—á–∞", "—É—Ç—é–≥", "—Ñ–∞—Ä–∞–æ–Ω", "—Ö—Ä—É—Å—Ç–∞–ª—å", "—á–∞—à–∫–∞", "—à–∞—Ä—Ñ", "—è–±–ª–æ–Ω—è",
        "–∞–≤—Ç–æ–±—É—Å", "–±–∞–ª–µ—Ä–∏–Ω–∞", "–≤–µ—Ä—Ç–æ–ª–µ—Ç", "–≥–æ—Ä—à–æ–∫", "–¥–∏–Ω–∞–º–∏—Ç", "–µ–∂", "–∂–µ–ª—É–¥—å", "–∑–µ—Ä–∫–∞–ª–æ", "–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç", "–∫–≤–∞–¥—Ä–∞—Ç", "–ª–æ–±—Å—Ç–µ—Ä", "–º—É–∑—ã–∫–∞",
        "–Ω–æ—Å–æ–∫", "–æ–ª–µ–Ω—å", "–ø–æ—Ç–æ–ª–æ–∫", "—Ä–æ–∑–∞", "—Å–æ–∫–æ–ª", "—Ç—Ä–∞–∫—Ç–æ—Ä", "—É–≥–æ–ª", "—Ñ–æ–Ω–∞—Ä—å", "—Ö—É–¥–æ–∂–Ω–∏–∫", "—á–∞—Å—ã", "—â–µ–Ω–æ–∫", "—è–∫–æ—Ä—å", "–∞–Ω–∞–Ω–∞—Å", "–±–∞—Ä—Ö–∞—Ç",
        "–≤–æ–¥–æ–ø–∞–¥", "–≥—Ä—É—à–∞", "–¥–µ—Ä–µ–≤–Ω—è", "–µ–¥–∏–Ω–æ—Ä–æ–≥", "–∂–∞–∂–¥–∞", "–∑–∞–º–µ—Ç–∫–∞–∞–∫–≤–∞—Ä–∏—É–º",
        "–±–µ–Ω–∑–∏–Ω", "–≤—É–ª–∫–∞–Ω", "–≥–ª–æ–±—É—Å", "–¥–æ–º–∏–Ω–æ", "–µ–∂–µ–¥–Ω–µ–≤–Ω–∏–∫", "–∂—É—Ä–Ω–∞–ª", "–∑–æ–Ω—Ç–∏–∫", "–∏–∑—É–º—Ä—É–¥", "–π–æ–≥–∞", "–∫–∞—Ä–µ—Ç–∞", "–ª–∏–Ω–∏—è",
        "–º—É—Ä–∞–≤–µ–π", "–Ω–∞–∫–æ–≤–∞–ª—å–Ω—è", "–æ—Å—å–º–∏–Ω–æ–≥", "–ø–ª–µ–¥", "—Ä—ã—Ü–∞—Ä—å", "—Å–≤–µ—á–∞", "—Ç—Ä–æ–ª–ª—å", "—É—Ç–∫–∞", "—Ñ–æ–∫—É—Å", "—Ö–∏–º–∏—è", "—Ü–∏—Ä–∫",
        "—á–µ–º–æ–¥–∞–Ω", "—à–∞–ø–∫–∞", "—é–ª–∞", "–∞–≤–∏–∞—Ç–æ—Ä", "–±–µ—Ä–µ–≥", "–≤–∞–∑–∞", "–≥–∏–≥–∞–Ω—Ç", "–¥–∏–∫–æ–±—Ä–∞–∑", "–µ–∂–∏–∫", "–∂—É—Ä–∞–≤–ª—å", "–∑–∞–º–æ—Ä–æ–∑–∫–∞",
        "–∏–Ω–æ–ø–ª–∞–Ω–µ—Ç—è–Ω–∏–Ω", "–∫–∞–∫—Ç—É—Å", "–ª–∞–ø—à–∞", "–º–∞–≥–Ω–∏—Ç", "–Ω–∏—Ç–∫–∞", "–æ–≥—É—Ä–µ—Ü", "–ø–∞—Ä–æ—Ö–æ–¥", "—Ä—ã–±–∞", "—Å–∞–ª—é—Ç", "—Ç–∞–∫—Å–∏", "—É–¥–æ—á–∫–∞",
        "—Ñ–æ—Ç–æ", "—Ö–æ–ª—Å—Ç", "—Ü–≤–µ—Ç–æ–∫", "—á–∞–π–∫–∞", "—à—É–±–∞", "—é–≤–µ–ª–∏—Ä", "–∞–Ω—Ç–µ–Ω–Ω–∞", "–±–∞—Ç–∞—Ä–µ—è", "–≤–∏–Ω—Ç", "–≥–æ—Ä–æ–¥", "–¥–∏—Å–∫",
        "–µ–∂–µ–≤–∏—á–Ω—ã–π", "–∂–µ–ª–µ–∑–æ", "–∑–æ–ª–æ—Ç–æ", "–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä", "–∫–∞–∑–∏–Ω–æ", "–ª–µ–¥", "–º–∞–Ω–¥–∞—Ä–∏–Ω", "–Ω–æ–∂", "–æ—Ö–æ—Ç–Ω–∏–∫", "–ø–∏—Ü—Ü–∞", "—Ä–æ–±–æ—Ç",
        "—Å–∞–ø–æ–≥", "—Ç–∞–±—É—Ä–µ—Ç", "—É–Ω–∏—Ñ–æ—Ä–º–∞", "—Ñ–æ–Ω—Ç–∞–Ω", "—Ö–æ–ª–º", "—Ü–∏–∫–ª", "—á–µ–ª–æ–≤–µ–∫", "—à–ª–µ–º", "—è–≥—É–∞—Ä", "–∞–Ω—Ç–∏–¥–æ—Ç", "–±—É–±–ª–∏–∫",
        "–≤–∏—à–Ω—è", "–≥–≤–æ–∑–¥—å", "–¥—É–±", "–µ–ª—å", "–∂–∞—Ä–∞", "–∑–º–µ—è", "–∏–Ω–∂–µ–Ω–µ—Ä", "–∫–∞–Ω–∞—Ç", "–ª–µ–¥–Ω–∏–∫", "–º–∞—Å–∫–∞", "–Ω–æ—Å", "–æ–∫–µ–∞–Ω",
        "–ø–∏–¥–∂–∞–∫", "—Ä—É–ª–µ—Ç–∫–∞", "—Å–∞—Ö–∞—Ä", "—Ç—Ä—É–±–∞", "—É–≥–æ–ª—å", "—Ñ–µ—Ä–º–∞", "—Ö—Ä–µ–±–µ—Ç", "—Ü–∏—Ä–∫—É–ª—è—Ü–∏—è", "—á–µ—Ä–Ω–∏–ª–∞", "—â—É–ø–∞–ª—å—Ü–µ",
        "—è–±–ª–æ—á–Ω—ã–π", "–∞–∫—Ä–æ–±–∞—Ç", "–±–∏—Ç–∞", "–≤–æ–ª–Ω–∞", "–≥—Ä–æ–∑–∞", "–¥—ã–º", "–µ–∂–∏–∫", "–∂–æ–∫–µ–π", "–∑–∞–≥–∞–¥–∫–∞", "–∏–≥—Ä–∞", "–∫–∞–±–ª—É–∫",
        "–ª–∞—Å—Ç–æ—á–∫–∞", "–º–µ—á", "–Ω–∞–ª–æ–≥", "–æ—Ä–µ—Ö", "–ø–æ—Ä–æ—à–æ–∫", "—Ä–∞–¥–∏–æ", "—Å–∞–ø—Ñ–∏—Ä", "—Ç–µ–ª–µ–∂–∫–∞", "—É–ª–æ–≤", "—Ñ—Ä—É–∫—Ç", "—Ö–æ–∫–∫–µ–π",
        "—Ü–∏—Ä–∫—É–ª—å", "—á–∞–π–Ω–∏–∫", "—à–ø–∏–Ω–∞—Ç", "—é—Ä–∏—Å—Ç", "–∞—Å—Ç–µ—Ä–æ–∏–¥", "–±–∞–∫–ª–∞–∂–∞–Ω", "–≤–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä", "–≥–∏—Ç–∞—Ä–∞", "–¥–µ–ª–æ", "–µ–∂–µ–≤–∏–∫–∞",
        "–∂–∏–ª—å–µ", "–∑–µ–ª–µ–Ω—ã–π", "–∏–≥–æ–ª–∫–∞", "–∫–∞–º–µ–Ω—å", "–ª–∏–ø–∞", "–º–∞—Ä–∫–∞", "–Ω–æ–∂–Ω–∏—Ü—ã", "–æ–≤—Ä–∞–≥", "–ø–∞–ª—å–º–∞", "—Ä–æ—Å–∞", "—Å–∏–Ω—Ç–µ–∑–∞—Ç–æ—Ä",
        "—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "—É–ø–∞–∫–æ–≤–∫–∞", "—Ñ–ª–∞–≥", "—Ö–ª–µ–±—É—à–µ–∫", "—Ü–∏—Ä–∫—É–ª—å", "—á—É–≥—É–Ω", "—à–ø–∞–≥–∞—Ç", "—è–≥–æ–¥–Ω–∏–∫", "–∞–º—É–ª–µ—Ç", "–±–∞—Ä", "–≤–æ–¥–∫–∞",
        "–≥–∏–º–Ω–∞—Å—Ç", "–¥–∏–≤–∞–Ω", "–µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–∂—É–ª–∏–∫", "–∑–∞–≥–æ–≤–æ—Ä", "–∏–≥—Ä—É—à–µ—á–Ω—ã–π", "–∫–∞–ø–µ–ª—å–∫–∞", "–ª–æ–¥–∫–∞", "–º–æ–ª–Ω–∏—è", "–Ω–æ—Ç–∞",
        "–æ–±–µ–∑—å—è–Ω–∞", "–ø–µ—Ä—á–∞—Ç–∫–∞", "—Ä—É–ª—å", "—Å–∫–∞–∑–∫–∞", "—Ç–µ–Ω—å", "—É—Ä–∞–Ω", "—Ñ–æ–Ω", "—Ö–≤–æ—è", "—Ü–µ–Ω–∞", "—á–∏—Å—Ç–æ—Ç–∞", "—à–∞–π–±–∞", "—è–±–ª–æ—á–∫–æ",
        "–∞–ø–µ–ª—å—Å–∏–Ω", "–±—É–º–µ—Ä–∞–Ω–≥", "–≤–æ—Å–∫", "–≥–ª–æ–±—É—Å", "–¥—É–±–ª—å", "–µ–∂–∏—Ö–∞", "–∂—É—á–æ–∫", "–∑–µ–±—Ä–∞", "–∏–∑–æ–ª–µ–Ω—Ç–∞", "–∫–∞–ø–æ—Ç", "–ª—É–∫",
        "–º–µ—Ç–ª–∞", "–Ω–æ–∂–∫–∞", "–æ–≥–æ—Ä–æ–¥", "–ø–ª–∞—Å—Ç–∏–∫", "—Ä—ã–±–∞–ª–∫–∞", "—Å–∞—Ä–∞–π", "—Ç–∞–∑", "—É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç", "—Ñ–æ—Ä—É–º", "—Ö—É–¥–æ–∂–Ω–∏—Ü–∞", "—Ü–≤–µ—Ç",
        "—á–µ–∫", "—à—Ç–∞–Ω–≥–∞", "—è–¥—Ä–æ", "–∞—Ä–µ–Ω–∞", "–±–æ—Ä–æ–¥–∞", "–≤–æ—Å—Ö–æ–¥", "–≥–æ—Ä–∫–∞", "–¥–∂–µ–º", "–µ–∂–∏–∫", "–∂–∏—Ä–∞—Ñ", "–∑–∞–ø–∞—Å", "–∏–ª–ª—é–∑–∏—è",
        "–∫–æ–ª–µ—Å–æ", "–ª–æ–¥–∫–∞", "–º–∏–∫—Ä–æ—Ñ–æ–Ω", "–Ω–æ—Å–∫–∏", "–æ–ø—Ä–∞–≤–∞", "–ø–ª–∞—Ç—å–µ", "—Ä–æ–±–æ—Ç", "—Å–∞–º–æ–ª–µ—Ç", "—Ç–æ–ø–æ—Ä", "—É–ª–µ–π", "—Ñ—Ä—É–∫—Ç—ã",
        "—Ö–æ–±–±–∏", "—Ü–∏—Ñ—Ä–∞", "—á–∞–π", "—à–∞—à–ª—ã–∫", "—è–≥–æ–¥–∞", "–∞—Ä–æ–º–∞—Ç", "–±–µ–ª–∫–∞", "–≤—Ä–∞–≥", "–≥–æ—Ä–∏–∑–æ–Ω—Ç", "–¥–µ–Ω—å", "–µ–∂–∏–∫", "–∂–µ–Ω–∞",
        "–∑–Ω–∞–º—è", "–∏–Ω—Ç–µ—Ä–Ω–µ—Ç", "–∫–æ–ª–æ–¥–µ—Ü", "–ª–∞–∑–µ—Ä", "–º–æ–ª–Ω–∏—è", "–Ω–æ–∂–∏", "–æ–ø–µ—Ä–∞—Ç–æ—Ä", "–ø–ª–æ–≤", "—Ä—É–±–∞—à–∫–∞", "—Å–æ–∫–æ–ª", "—Ç–æ—Ä—Ç",
        "—É—Ç—é–≥", "—Ñ–æ—Ç–æ–∞–ø–ø–∞—Ä–∞—Ç", "—Ö–≤–æ—Å—Ç", "—Ü–≤–µ—Ç–æ–∫", "—á–µ—Ä–µ–ø", "—à–ª–µ–º", "—è—Å—Ç—Ä–µ–±", "–∞–Ω–∞–Ω–∞—Å", "–±–∞–Ω–∫–∞", "–≤–∏–ª–∫–∞", "–≥–æ–Ω–∫–∞",
        "–¥–µ—Ç–∏", "–µ–∂", "–∂–∞—Ä", "–∑–∞—è—Ü", "–∏–∫—Ä–∞", "–∫–æ–ª—è—Å–∫–∞", "–ª–∞–ø–∞", "–º—ã—à—å", "–Ω–æ–∂–∫–∞", "–æ–±—Ä—É—á", "–ø–µ—Ä–µ—Ü", "—Ä–∞–∫", "—Å–∞—Ö–∞—Ä",
        "—Ç—é–ª—å", "—É—Ç–∫–∞", "—Ñ—É—Ç–±–æ–ª", "—Ö–≤–æ—Å—Ç–∏–∫", "—Ü–≤–µ—Ç–æ—á–µ–∫", "—á–µ–º–ø–∏–æ–Ω", "—à–æ—Ä—Ç—ã", "—è—Ä–º–∞—Ä–∫–∞", "–∞—Ä–±—É–∑", "–±–∞—Ç–æ–Ω", "–≤–∏–Ω–æ",
        "–≥–æ—Ä–æ—Ö", "–¥–∏–Ω–æ–∑–∞–≤—Ä", "–µ–∂–∏–∫", "–∂–∏–≤–æ–ø–∏—Å—å", "–∑–Ω–∞–∫", "–∏–ª–ª—é–∑–∏—è", "–∫–Ω–∏–∂–∫–∞", "–ª—è–≥—É—à–∫–∞", "–º–æ—Ä—è–∫", "–Ω–æ–∂", "–æ–±–µ–¥",
        "–ø–∏–ª–æ—Ç", "—Ä—É—á–∫–∞", "—Å–æ–±–æ–ª—å", "—Ç—é–±–∏–∫", "—É—Ö–æ", "—Ñ–µ–Ω", "—Ö–ª–µ–±", "—Ü–≤–µ—Ç—ã", "—á–∞–π–Ω–∏–∫", "—à–æ—Å—Å–µ", "—è–∫–æ—Ä—å", "–∞—Ä—Ö–∏–≤",
        "–±—É–¥–∏–ª—å–Ω–∏–∫", "–≤–∏–Ω–æ–≥—Ä–∞–¥", "–≥—Ä–∏–ª—å", "–¥—É—à", "–µ–∂–∏–∫", "–∂–µ—Å—Ç", "–∑–∏–º–∞", "–∏–Ω–¥—é–∫", "–∫–æ–±—Ä–∞", "–ª–∞–º–ø–∞", "–º–µ—Ç–∞–ª–ª", "–Ω–æ—Ç–∞",
        "–æ–±—Ä—É—á", "–ø–∏—Ä–æ–≥", "—Ä—ã–±–∫–∞", "—Å–æ–±–∞–∫–∞", "—Ç—Ä—É–±–∞", "—É–ª–∏—Ç–∫–∞", "—Ñ–µ–π–µ—Ä–≤–µ—Ä–∫", "—Ö–ª–æ–ø–æ–∫", "—Ü–∏–ª–∏–Ω–¥—Ä", "—á–µ—Ä–µ—à–Ω—è", "—à–∞—Ä",
        "—è–∏—á–Ω–∏—Ü–∞", "–∞—Å—Ç—Ä–æ–Ω–æ–º", "–±–∞–Ω–∞–Ω", "–≤–µ–Ω—Ç–∏–ª—å", "–≥–æ—Ä—á–∏—Ü–∞", "–¥—Ä–∞–∫–æ–Ω", "–µ–∂–∏–∫", "–∂–∏–ª–µ—Ç", "–∑—É–±", "–∏—Å–∫–∞—Ç–µ–ª—å", "–∫–ª–∞—Å—Å",
        "–ª–∏—Å–∞", "–º—ë–¥", "–Ω–∏—Ç–∫–∞", "–æ–∑–µ—Ä–æ", "–ø–ª–∞—Å—Ç–∏–Ω–∫–∞", "—Ä–æ–∑–∞", "—Å–µ—Ç—å", "—Ç—Ä–∞–≤–∞", "—É—Ä–æ–∫", "—Ñ–∞–Ω–µ—Ä–∞", "—Ö—É—Ç–æ—Ä", "—Ü–∏—Ä–∫—É–ª—å",
        "—á–µ—Ä–µ–ø–∞—Ö–∞", "—à–ª—è–ø–∫–∞", "—è–±–ª–æ–∫–æ", "–∞–∫—É–ª–∞", "–±–∞—Å—Å–µ–π–Ω", "–≤–∏—Å–∫–∏", "–≥–æ–ª–æ–≤–∞", "–¥–µ–Ω—å–≥–∏", "–µ–∂–∏–∫", "–∂–∏–∑–Ω—å", "–∑–∞–ø–∞—Ö",
        "–∏–≥—Ä—É—à–∫–∞", "–∫–∏—Å—Ç—å", "–ª–æ–∫–æ—Ç—å", "–º–µ—Ç—Ä", "–Ω–æ—Å–æ–∫", "–æ–≥–æ–Ω—å", "–ø—Ç–∏—Ü–∞", "—Ä–µ—Ü–µ–ø—Ç", "—Å–∏–≥–Ω–∞–ª", "—Ç–æ—á–∫–∞", "—É—Ö–æ", "—Ñ–∏–ª—å–º",
        "—Ö–∞—Ç–∞", "—Ü–≤–µ—Ç", "—á–µ–∫", "—à—Ç–æ—Ä–∞", "—è–≥–æ–¥–∫–∞"
    ]

# –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
available_operations = (
    "–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π:\n"
    "‚ûï –°–ª–æ–∂–µ–Ω–∏–µ: a + b\n"
    "‚ûñ –í—ã—á–∏—Ç–∞–Ω–∏–µ: a - b\n"
    "‚úñÔ∏è –£–º–Ω–æ–∂–µ–Ω–∏–µ: a * b\n"
    "‚ûó –î–µ–ª–µ–Ω–∏–µ —Å –æ—Å—Ç–∞—Ç–∫–æ–º: a / b\n"
    "‚ûó –î–µ–ª–µ–Ω–∏–µ –Ω–∞—Ü–µ–ª–æ: a // b\n"
    "üî¢ –û—Å—Ç–∞—Ç–æ–∫ –æ—Ç –¥–µ–ª–µ–Ω–∏—è: a % b\n"
    "‚¨ÜÔ∏è –í–æ–∑–≤–µ–¥–µ–Ω–∏–µ –≤ —Å—Ç–µ–ø–µ–Ω—å: a ** b\n"
    "üìê –¢—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—è:\n"
    "   - sinX: —Å–∏–Ω—É—Å —É–≥–ª–∞ X (–≤ –≥—Ä–∞–¥—É—Å–∞—Ö)\n"
    "   - cosX: –∫–æ—Å–∏–Ω—É—Å —É–≥–ª–∞ X (–≤ –≥—Ä–∞–¥—É—Å–∞—Ö)\n"
    "   - tgX: —Ç–∞–Ω–≥–µ–Ω—Å —É–≥–ª–∞ X (–≤ –≥—Ä–∞–¥—É—Å–∞—Ö)\n"
    "   - ctgX: –∫–æ—Ç–∞–Ω–≥–µ–Ω—Å —É–≥–ª–∞ X (–≤ –≥—Ä–∞–¥—É—Å–∞—Ö)\n\n"
    "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã:\n"
    "   - /—Ç–∞–±–ª–∏—Ü–∞_—É–º–Ω–æ–∂–µ–Ω–∏—è: —Ç–∞–±–ª–∏—Ü–∞ —É–º–Ω–æ–∂–µ–Ω–∏—è (1-10)\n"
    "   - /—Ç–∞–±–ª–∏—Ü–∞_—Å—Ç–µ–ø–µ–Ω–µ–π: —Ç–∞–±–ª–∏—Ü–∞ —Å—Ç–µ–ø–µ–Ω–µ–π (1-10)\n"
    "   - /—Ç–∞–±–ª–∏—Ü–∞_–∫–≤–∞–¥—Ä–∞—Ç–æ–≤: —Ç–∞–±–ª–∏—Ü–∞ –∫–≤–∞–¥—Ä–∞—Ç–æ–≤ (1-20)\n\n"
    "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'a <–æ–ø–µ—Ä–∞—Ü–∏—è> b' –∏–ª–∏ 'sinX', 'cosX', 'tgX', 'ctgX'"
    "\n\n*–î–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–µ—Å—Å–∏–∏ –≤–≤–µ–¥–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ /–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞"
)


@bot.message_handler(commands=['member'])
def get_member_id(message):
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
        args = message.text.split()

        if len(args) != 2:
            bot.reply_to(message, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /member @username")
            return

        username = args[1]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ username —Å '@'
        if not username.startswith('@'):
            bot.reply_to(message, "‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ @username.")
            return

        # –£–±–∏—Ä–∞–µ–º '@' –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ API Telegram
        username = username[1:]

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–µ—Ä–µ–∑ get_chat_administrators
        chat_id = message.chat.id

        # Telegram API –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø—Ä—è–º–æ–≥–æ –º–µ—Ç–æ–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π,
        # –ø–æ—ç—Ç–æ–º—É –º—ã –º–æ–∂–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å admins –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ get_chat_member
        try:
            member_info = bot.get_chat_member(chat_id, username)
            user_id = member_info.user.id
            bot.send_message(chat_id, f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username}: {user_id}")
        except Exception as e:
            bot.reply_to(message, f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username} –≤ —á–∞—Ç–µ. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
            return
    except Exception as e:
        bot.reply_to(message, f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

@bot.message_handler(commands=list(interactions.keys()))
def handle_interaction(message):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if message.reply_to_message:
            target = message.reply_to_message.from_user.username or message.reply_to_message.from_user.first_name
            sender = message.from_user.username or message.from_user.first_name
            command = message.text.split()[0][1:]  # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–∞–Ω–¥—É –±–µ–∑ "/"

            # –°–ª—É—á–∞–π–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç (—É—Å–ø–µ—Ö –∏–ª–∏ –Ω–µ—É–¥–∞—á–∞)
            result = random.choice(["success", "fail"])
            interaction_message = interactions[command][result].format(sender=sender, target=target)
            bot.send_message(message.chat.id, interaction_message)
        else:
            bot.reply_to(message, "‚õî –ö–æ–º–∞–Ω–¥—É –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞!")
    except KeyError:
        bot.reply_to(message, "‚õî –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è!")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–ø–æ–º—è–Ω—É—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_mentioned_user(message):
    if message.reply_to_message:
        return message.reply_to_message.from_user
    if message.entities:
        for entity in message.entities:
            if entity.type == 'mention':
                username = message.text[entity.offset + 1: entity.offset + entity.length]
                try:
                    user_info = bot.get_chat_member(message.chat.id, username)
                    return user_info.user
                except:
                    return None
    return None

# –ö–æ–º–∞–Ω–¥–∞ /–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞ ‚Äî –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç —Å–µ—Å—Å–∏—é –≤—ã—á–∏—Å–ª–µ–Ω–∏–π
@bot.message_handler(commands=['–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞'])
def start_math_session(message):
    user_id = message.from_user.id

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª —Å–µ—Å—Å–∏—é, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –µ—ë
    if user_id in active_sessions:
        active_sessions.remove(user_id)
        bot.send_message(message.chat.id, "üîÑ –°–µ—Å—Å–∏—è —Å–±—Ä–æ—à–µ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ /–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞ —Å–Ω–æ–≤–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–≥–æ —Å–µ–∞–Ω—Å–∞.")
    else:
        active_sessions.add(user_id)
        bot.send_message(message.chat.id, available_operations)

# –ö–æ–º–∞–Ω–¥–∞ /—Ç–∞–±–ª–∏—Ü–∞_—É–º–Ω–æ–∂–µ–Ω–∏—è
@bot.message_handler(commands=['—Ç–∞–±–ª–∏—Ü–∞_—É–º–Ω–æ–∂–µ–Ω–∏—è'])
def multiplication_table(message):
    table = "üìä –¢–∞–±–ª–∏—Ü–∞ —É–º–Ω–æ–∂–µ–Ω–∏—è (1-10):\n"
    for i in range(1, 11):
        row = " | ".join([f"{i}√ó{j}={i * j}" for j in range(1, 11)])
        table += row + "\n"
    bot.send_message(message.chat.id, f"<pre>{table}</pre>", parse_mode="HTML")

# –ö–æ–º–∞–Ω–¥–∞ /—Ç–∞–±–ª–∏—Ü–∞_—Å—Ç–µ–ø–µ–Ω–µ–π
@bot.message_handler(commands=['—Ç–∞–±–ª–∏—Ü–∞_—Å—Ç–µ–ø–µ–Ω–µ–π'])
def powers_table(message):
    table = "üìä –¢–∞–±–ª–∏—Ü–∞ —Å—Ç–µ–ø–µ–Ω–µ–π (1-10):\n"
    for i in range(1, 11):
        row = " | ".join([f"{i}^{j}={i ** j}" for j in range(1, 11)])
        table += row + "\n"
    bot.send_message(message.chat.id, f"<pre>{table}</pre>", parse_mode="HTML")

# –ö–æ–º–∞–Ω–¥–∞ /—Ç–∞–±–ª–∏—Ü–∞_–∫–≤–∞–¥—Ä–∞—Ç–æ–≤
@bot.message_handler(commands=['—Ç–∞–±–ª–∏—Ü–∞_–∫–≤–∞–¥—Ä–∞—Ç–æ–≤'])
def squares_table(message):
    table = "üìä –¢–∞–±–ª–∏—Ü–∞ –∫–≤–∞–¥—Ä–∞—Ç–æ–≤ (1-20):\n"
    for i in range(1, 21):
        table += f"{i}¬≤ = {i ** 2}\n"
    bot.send_message(message.chat.id, f"<pre>{table}</pre>", parse_mode="HTML")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏—è–º–∏
@bot.message_handler(func=lambda message: message.from_user.id in active_sessions)
def solve_math_expression(message):
    expression = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
    trig_match = re.match(r'(sin|cos|tg|ctg)(-?\d+)', expression)
    if trig_match:
        try:
            func, angle = trig_match.groups()
            angle = float(angle)

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≥—Ä–∞–¥—É—Å—ã –≤ —Ä–∞–¥–∏–∞–Ω—ã
            radians = math.radians(angle)

            # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ
            if func == 'sin':
                result = math.sin(radians)
            elif func == 'cos':
                result = math.cos(radians)
            elif func == 'tg':
                result = math.tan(radians)
            elif func == 'ctg':
                result = 1 / math.tan(radians) if math.tan(radians) != 0 else '‚àû'  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–ª–µ–Ω–∏—è –Ω–∞ 0

            bot.send_message(message.chat.id, f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç {func}{angle}: {result:.6f}")
        except Exception:
            bot.reply_to(message, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏ —Ç—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
    match = re.match(r'(-?\d+)\s*([+\-*/%//**]+)\s*(-?\d+)', expression)
    if not match:
        bot.reply_to(message, "‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'a <–æ–ø–µ—Ä–∞—Ü–∏—è> b' –∏–ª–∏ 'sinX', 'cosX', 'tgX', 'ctgX'")
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–∞ –∏ –æ–ø–µ—Ä–∞—Ü–∏—é
    a = int(match.group(1))
    operator = match.group(2)
    b = int(match.group(3))

    # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ
    try:
        if operator == '+':
            result = a + b
        elif operator == '-':
            result = a - b
        elif operator == '*':
            result = a * b
        elif operator == '/':
            result = a / b
        elif operator == '//':
            result = a // b
        elif operator == '%':
            result = a % b
        elif operator == '**':
            result = a ** b
        else:
            bot.reply_to(message, "‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è.")
            return

        bot.send_message(message.chat.id, f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
    except ZeroDivisionError:
        bot.reply_to(message, "‚ö†Ô∏è –û—à–∏–±–∫–∞: –î–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.")


@bot.message_handler(commands=['—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞'])
def send_characteristic(message):
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —É–ø–æ–º—è–Ω—É—Ç –ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫ —á–µ—Ä–µ–∑ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if message.reply_to_message:
            target = message.reply_to_message.from_user.username or message.reply_to_message.from_user.first_name
        elif len(message.text.split()) > 1:
            target = message.text.split()[1]  # –ü–æ–ª—É—á–∞–µ–º —É–∫–∞–∑–∞–Ω–Ω—ã–π username
        else:
            bot.reply_to(message, "‚õî –£–∫–∞–∂–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å –ø–æ–º–æ—â—å—é —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–ª–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ!")
            return

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è 3 —Å–ª—É—á–∞–π–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
        selected_characteristics = random.sample(characteristics, 3)

        response_text = f"""
üóÑÔ∏è –®–∫–∞—Ñ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ üóÑÔ∏è
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ  –£—á–∞—Å—Ç–Ω–∏–∫: {target}    ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ     {selected_characteristics[0][0]} {selected_characteristics[0][2]} 
‚îÇ     ‚Äî {selected_characteristics[0][1]} 
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ     {selected_characteristics[1][0]} {selected_characteristics[1][2]} 
‚îÇ     ‚Äî {selected_characteristics[1][1]} 
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ     {selected_characteristics[2][0]} {selected_characteristics[2][2]} 
‚îÇ     ‚Äî {selected_characteristics[2][1]} 
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
        """

        bot.send_message(message.chat.id, response_text)

    except Exception as e:
        bot.reply_to(message, f"‚õî –û—à–∏–±–∫–∞: {str(e)}")


# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
@bot.message_handler(content_types=['new_chat_members'])
def welcome_new_member(message):
    for new_user in message.new_chat_members:
        bot.send_message(message.chat.id, f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {new_user.first_name}!")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–ª–æ—Ö–∏—Ö —Å–ª–æ–≤
@bot.message_handler(func=lambda message: any(bad_word in message.text.lower() for bad_word in BAD_WORDS))
def bad_word_detected(message):
    bot.delete_message(message.chat.id, message.message_id)

    # –ú—å—é—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ 1 —á–∞—Å
    bot.restrict_chat_member(
        message.chat.id,
        message.from_user.id,
        until_date=datetime.now() + timedelta(hours=1),
        can_send_messages=False
    )

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–Ω—è—Ç–∏—è –º—É—Ç–∞
    unmute_button = InlineKeyboardMarkup().add(
        InlineKeyboardButton("–°–Ω—è—Ç—å –º—É—Ç", callback_data=f"unmute_{message.from_user.id}")
    )

    # –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ HTML
    user_mention = f"<a href='tg://user?id={message.from_user.id}'>{html.escape(message.from_user.first_name)}</a>"

    # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –º—å—é—Ç–µ —Å –∫–Ω–æ–ø–∫–æ–π "–°–Ω—è—Ç—å –º—É—Ç"
    bot.send_message(
        message.chat.id,
        f"üîá {user_mention}, –≤—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–º–æ–ª—á–∞–Ω—ã –Ω–∞ 1 —á–∞—Å –∑–∞ –ø–ª–æ—Ö–∏–µ —Å–ª–æ–≤–∞!",
        parse_mode='HTML',
        reply_markup=unmute_button
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–Ω—è—Ç–∏—è –º—É—Ç–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@bot.callback_query_handler(func=lambda call: call.data.startswith("unmute_"))
def unmute_user(call):
    user_id = int(call.data.split('_')[1])  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ callback_data

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É
    user_status = bot.get_chat_member(call.message.chat.id, call.from_user.id).status

    if user_status in ['administrator', 'creator']:
        try:
            # –°–Ω–∏–º–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            bot.restrict_chat_member(
                call.message.chat.id,
                user_id,
                can_send_messages=True,
                can_send_media_messages=True,
                can_send_other_messages=True,
                can_add_web_page_previews=True
            )

            # –°–æ–æ–±—â–∞–µ–º –æ —Å–Ω—è—Ç–∏–∏ –º—É—Ç–∞
            bot.send_message(call.message.chat.id,
                             f"üîä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª —Ä–∞–∑–º—å—é—á–µ–Ω.")

        except Exception as e:
            bot.send_message(call.message.chat.id, f"‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å —Å–Ω—è—Ç—å –º—É—Ç: {e}")
    else:
        # –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–µ–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        bot.answer_callback_query(call.id, "–£–±–µ—Ä–∏ —Ä—É–∫–∏, –Ω–∞–¥–æ –∏–º–µ—Ç—å –ø—Ä–∞–≤–∞", show_alert=True)

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –º—å—é—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@bot.message_handler(commands=['–º—É—Ç'])
def mute_user(message):
    if message.reply_to_message:
        user_status = bot.get_chat_member(message.chat.id, message.from_user.id).status
        if user_status in ['administrator', 'creator']:
            try:
                command_parts = message.text.split()
                if len(command_parts) < 3:
                    bot.reply_to(message, "‚ùó –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è –∏ –ø—Ä–∏—á–∏–Ω—É. –ü—Ä–∏–º–µ—Ä: /–º—É—Ç 1 —á–∞—Å –§–ª—É–¥.")
                else:
                    duration = int(command_parts[1])  # –≤—Ä–µ–º—è –º—É—Ç–∞
                    reason = ' '.join(command_parts[2:])  # –ø—Ä–∏—á–∏–Ω–∞
                    mute_duration = timedelta(hours=duration)

                    # –ú—å—é—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    bot.restrict_chat_member(
                        message.chat.id,
                        message.reply_to_message.from_user.id,
                        until_date=datetime.now() + mute_duration
                    )

                    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–Ω—è—Ç–∏—è –º—É—Ç–∞
                    unmute_button = InlineKeyboardMarkup().add(
                        InlineKeyboardButton("–°–Ω—è—Ç—å –º—É—Ç",
                                             callback_data=f"unmute_{message.reply_to_message.from_user.id}")
                    )

                    # –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ HTML
                    user_mention = f"<a href='tg://user?id={message.reply_to_message.from_user.id}'>{html.escape(message.reply_to_message.from_user.first_name)}</a>"

                    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –º—å—é—Ç–µ —Å –∫–Ω–æ–ø–∫–æ–π "–°–Ω—è—Ç—å –º—É—Ç"
                    bot.send_message(
                        message.chat.id,
                        f"üîá –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_mention}\n–ü–æ–ª—É—á–∏–ª –º—É—Ç –Ω–∞ {duration} —á–∞—Å(–æ–≤).\n–ü—Ä–∏—á–∏–Ω–∞: {reason}.",
                        parse_mode='HTML',
                        reply_markup=unmute_button
                    )
            except Exception as e:
                bot.reply_to(message, f"‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        else:
            bot.reply_to(message, "‚ùó –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
    else:
        bot.reply_to(message, "‚ùó –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –∑–∞–º—å—é—Ç–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–Ω—è—Ç–∏—è –º—É—Ç–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@bot.callback_query_handler(func=lambda call: call.data.startswith("unmute_"))
def unmute_user(call):
    user_id = int(call.data.split('_')[1])  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ callback_data

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É
    user_status = bot.get_chat_member(call.message.chat.id, call.from_user.id).status

    if user_status in ['administrator', 'creator']:
        try:
            # –°–Ω–∏–º–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            bot.restrict_chat_member(
                call.message.chat.id,
                user_id,
                can_send_messages=True,
                can_send_media_messages=True,
                can_send_other_messages=True,
                can_add_web_page_previews=True
            )

            # –°–æ–æ–±—â–∞–µ–º –æ —Å–Ω—è—Ç–∏–∏ –º—É—Ç–∞
            bot.send_message(call.message.chat.id, f"üîä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª —Ä–∞–∑–º—å—é—á–µ–Ω.")

        except Exception as e:
            bot.send_message(call.message.chat.id, f"‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å —Å–Ω—è—Ç—å –º—É—Ç: {e}")
    else:
        # –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–µ–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        bot.answer_callback_query(call.id, "–£–±–µ—Ä–∏ —Ä—É–∫–∏, –Ω–∞–¥–æ –∏–º–µ—Ç—å –ø—Ä–∞–≤–∞", show_alert=True)


# –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ, –≥–¥–µ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
db_folder = r"C:\Users\–®\OneDrive\Desktop\tgbot\tgbots"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º raw-—Å—Ç—Ä–æ–∫—É –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—É—Ç–∏

# –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–∞–ø–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
os.makedirs(db_folder, exist_ok=True)

# –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
db_path = os.path.join(db_folder, "bans.db")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –±–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@bot.message_handler(commands=['–±–∞–Ω'])
def ban_user(message):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if not message.reply_to_message:
        bot.reply_to(message, "‚ùó –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –∑–∞–±–∞–Ω–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞.")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    user_status = bot.get_chat_member(message.chat.id, message.from_user.id).status
    if user_status not in ['administrator', 'creator']:
        bot.reply_to(message, "‚ùó –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã
    command_parts = message.text.split()
    if len(command_parts) < 3:
        bot.reply_to(message, "‚ùó –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è (–≤ —á–∞—Å–∞—Ö) –∏ –ø—Ä–∏—á–∏–Ω—É. –ü—Ä–∏–º–µ—Ä: /–±–∞–Ω 1 –°–ø–∞–º.")
        return

    try:
        duration = command_parts[1]
        reason = ' '.join(command_parts[2:])
        target_user = message.reply_to_message.from_user

        # –ë–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        bot.kick_chat_member(message.chat.id, target_user.id)

        # –ó–∞–ø–∏—Å—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        with sqlite3.connect(db_path) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS banned_users (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER NOT NULL,
                    username TEXT,
                    reason TEXT,
                    ban_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            cursor.execute(
                "INSERT INTO banned_users (user_id, username, reason) VALUES (?, ?, ?)",
                (target_user.id, target_user.username or '', reason)
            )

        # –ö–Ω–æ–ø–∫–∞ —Ä–∞–∑–±–∞–Ω
        unban_button = InlineKeyboardMarkup().add(
            InlineKeyboardButton("–†–∞–∑–±–∞–Ω–∏—Ç—å", callback_data=f"unban_{target_user.id}")
        )

        # –£–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        user_mention = f"<a href='tg://user?id={target_user.id}'>{html.escape(target_user.first_name)}</a>"

        bot.send_message(
            message.chat.id,
            f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_mention}\n–ë—ã–ª –∑–∞–±–∞–Ω–µ–Ω –Ω–∞ {duration} —á–∞—Å–æ–≤.\n–ü—Ä–∏—á–∏–Ω–∞: {reason}.",
            parse_mode='HTML',
            reply_markup=unban_button
        )

    except Exception as e:
        bot.reply_to(message, f"‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∞–∑–±–∞–Ω–∞
@bot.callback_query_handler(func=lambda call: call.data.startswith("unban_"))
def unban_user(call):
    user_id = int(call.data.split('_')[1])
    user_status = bot.get_chat_member(call.message.chat.id, call.from_user.id).status

    if user_status in ['administrator', 'creator']:
        try:
            bot.unban_chat_member(call.message.chat.id, user_id)
            bot.send_message(call.message.chat.id, f"üîì –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª —Ä–∞–∑–±–∞–Ω–µ–Ω.")
        except Exception as e:
            bot.send_message(call.message.chat.id, f"‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
    else:
        bot.answer_callback_query(call.id, "–£–±–µ—Ä–∏ —Ä—É–∫–∏, –Ω–∞–¥–æ –∏–º–µ—Ç—å –ø—Ä–∞–≤–∞", show_alert=True)



# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
def create_inline_keyboard():
    keyboard = types.InlineKeyboardMarkup()
    button = types.InlineKeyboardButton("–ú—ã—Å–ª–∏—Ç–µ–ª–∏", callback_data="thinkers")
    keyboard.add(button)
    return keyboard

# –ö–æ–º–∞–Ω–¥–∞ /–∏–Ω—Ñ–æ
@bot.message_handler(commands=['–∏–Ω—Ñ–æ'])
def send_info(message):
    try:
        bot.send_message(message.chat.id, info_text, parse_mode='HTML', reply_markup=create_inline_keyboard())
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ "–ú—ã—Å–ª–∏—Ç–µ–ª–∏"
@bot.callback_query_handler(func=lambda call: call.data == "thinkers")
def thinkers(call):
    new_text = "<b>–ü–æ–º–æ–≥–∞–ª–∏ –ø—Ä–∏–¥—É–º—ã–≤–∞—Ç—å –∏–¥–µ–∏:</b>\n@VoriXq\n@Katerina_blsh\n"
    new_keyboard = types.InlineKeyboardMarkup()
    back_button = types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ", callback_data="return_info")
    new_keyboard.add(back_button)

    try:
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=new_text, reply_markup=new_keyboard, parse_mode='HTML')
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –º—ã—Å–ª–∏—Ç–µ–ª—è—Ö: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ "–í–µ—Ä–Ω—É—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ"
@bot.callback_query_handler(func=lambda call: call.data == "return_info")
def return_info(call):
    try:
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=info_text, reply_markup=create_inline_keyboard(), parse_mode='HTML')
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ: {e}")


# –ö–æ–º–∞–Ω–¥–∞ "—Ö–µ–ª–ø" –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥ —Å –∫–Ω–æ–ø–∫–∞–º–∏
@bot.message_handler(commands=['—Ö–µ–ª–ø'])
def user_help(message):
    markup = types.InlineKeyboardMarkup()

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
    interaction_buttons = [
        types.InlineKeyboardButton("–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ", callback_data='interaction_commands'),
        types.InlineKeyboardButton("–î—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã", callback_data='other_commands'),
    ]

    markup.add(*interaction_buttons)

    bot.send_message(message.chat.id, "üìú –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –∫–æ–º–∞–Ω–¥:", reply_markup=markup)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
@bot.callback_query_handler(func=lambda call: call.data in ['interaction_commands', 'other_commands'])
def send_help(call):
    if call.data == 'interaction_commands':
        help_text = """
\t\t–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω—É–∂–Ω–æ <u>–û—Ç–≤–µ—Ç–∏—Ç—å</u> –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
        
üìå <b>–ö–æ–º–∞–Ω–¥—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è:</b>
1. /—É–±–∏—Ç—å - –ü–æ–ø—ã—Ç–∫–∞ —É–±–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
2. /–ø–æ—Ü–µ–ª–æ–≤–∞—Ç—å - –ü–æ—Ü–µ–ª–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
3. /–æ–±–Ω—è—Ç—å - –û–±–Ω—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
4. /—É–¥–∞—Ä–∏—Ç—å - –£–¥–∞—Ä–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
5. /–∑–∞—Ä–∞–∑–∏—Ç—å - –ó–∞—Ä–∞–∑–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
6. /—Å–∂–µ—á—å - –ü–æ–¥–∂–µ—á—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
7. /—Ä–∞—Å—Å–º–µ—à–∏—Ç—å - –†–∞—Å—Å–º–µ—à–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
8. /–∑–∞—Å—Ç—Ä–µ–ª–∏—Ç—å - –†–∞—Å—Å—Ç—Ä–µ–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
9. /–∫–∞—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å - –õ–∏—à–∏—Ç—å –¥–æ—Å—Ç–æ–∏–Ω—Å–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
10. /–≤–∑–±–µ—Å–∏—Ç—å - –í–∑–±–µ—Å–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
11. /–∏—Å–ø—É–≥–∞—Ç—å - –ò—Å–ø—É–≥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
12. /–ø–æ—Ö–≤–∞–ª–∏—Ç—å - –ü–æ—Ö–≤–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
13. /–ø–æ–¥–∞—Ä–∏—Ç—å - –ü–æ–¥–∞—Ä–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
14. /–ø–Ω—É—Ç—å - –î–∞—Ç—å –ø–æ–¥ –∑–∞–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
15. /–∫–ª–æ—É–Ω - –°–¥–µ–ª–∞—Ç—å –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–ª–æ—É–Ω–∞.
"""
    else:
        help_text = """
üìå <b>–î—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã:</b>
1. /–∞–Ω–µ–∫–¥–æ—Ç - –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –∞–Ω–µ–∫–¥–æ—Ç.
2. /—à–∞—Ä - –ú–∞–≥–∏—á–µ—Å–∫–∏–π —à–∞—Ä –æ—Ç–≤–µ—Ç–∏—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å.
3. /–∫–æ–º–ø–ª–∏–º–µ–Ω—Ç - –ü–æ–ª—É—á–∏—Ç—å –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç.
4. /–∏–Ω—Ñ–æ - –£–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ.
5. /—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ @–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å- –†–∞–∑–ª–æ–∂–∏—Ç—å –ø–æ –ø–æ–ª–æ—á–∫–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
6. /–Ω–∞–π—Ç–∏ - –ù–∞–π—Ç–∏ —á—Ç–æ-—Ç–æ –≤ –≥—É–≥–ª–µ.
7. /—Å–æ–æ–±—â–µ–Ω–∏—è - –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–ª-–≤–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç.
8. /–∞–∫—Ç–∏–≤ - –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¢–û–ü –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–∞—Ç–∞.
9. /—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å @1 @2 - —É–∑–Ω–∞—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –¥–≤—É—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.
10. /–≤–∏—Å–µ–ª–∏—Ü–∞ - –∏–≥—Ä–∞ –≤ –≤–∏—Å–µ–ª–∏—Ü—É
11. /–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞ - –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç —Å–µ—Å—Å–∏—é –≤—ã—á–∏—Å–ª–µ–Ω–∏–π.
12. /–ø–µ—Å–Ω—è - –Ω–∞–π—Ç–∏ –ø–µ—Å–Ω—é –Ω–∞ —é—Ç—É–±–µ.
13. /—Å–ø–∞–º - –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–∞–º –≤ –ª—Å.
14. /–ø–æ–≥–æ–¥–∞ - —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –≤ –≥–æ—Ä–æ–¥–µ.
15. /—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ - —É–∑–Ω–∞—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É —Ä—è–¥–æ–º —Å –≤–∞–º–∏ (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Å –±–æ—Ç–æ–º)
16. /—É–ø–æ–º–∏–Ω—É—Ç—å - —É–ø–æ–º—è–Ω—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç–µ.
17. /myid - —É–∑–Ω–∞—Ç—å —Å–≤–æ–π ID.
18. /–ø–µ—Ä–µ–≤–µ—Å—Ç–∏ - –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç –Ω–∞ –¥—Ä—É–≥–æ–π —è–∑—ã–∫.
19. /–ø–∏–Ω–≥ - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–¥–µ—Ä–∂–∫—É –±–æ—Ç–∞.
"""

    # –û—Ç–≤–µ—Ç –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
    bot.send_message(call.message.chat.id, help_text, parse_mode='HTML')
    bot.answer_callback_query(call.id)  # –£–±–∏—Ä–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏


# 8. –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ª—é–±–≤–∏
@bot.message_handler(commands=['—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å'])
def love_calculator(message):
    try:
        names = message.text.split()[1:]
        if len(names) != 2:
            bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–≤–∞ –∏–º–µ–Ω–∏: /—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –ò–º—è1 –ò–º—è2")
            return
        love_score = random.randint(0, 100)
        bot.reply_to(message, f"–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –º–µ–∂–¥—É {names[0]} –∏ {names[1]}: {love_score}% {heart_emoji}")
    except IndexError:
        bot.reply_to(message, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –ò–º—è1 –ò–º—è2")

# –ö–æ–º–∞–Ω–¥–∞ "—É–¥–∞–ª–∏—Ç—å" –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(commands=['—É–¥–∞–ª–∏—Ç—å'])
def delete_messages(message):
    if not is_admin(message.chat.id, message.from_user.id):
        bot.send_message(message.chat.id, "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!")
        return
    args = message.text.split()
    if len(args) < 2 or not args[1].isdigit():
        bot.send_message(message.chat.id, "‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /—É–¥–∞–ª–∏—Ç—å <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ>")
        return

    count = int(args[1])
    chat_id = message.chat.id
    message_ids = [message.message_id - i for i in range(count)]

    for msg_id in message_ids:
        try:
            bot.delete_message(chat_id, msg_id)
        except Exception as e:
            bot.send_message(chat_id, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {str(e)}")


# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∏–≥—Ä—ã
current_word = random.choice(word_list)
guessed_letters = []
attempts = 0
max_attempts = 6
is_game_active = False  # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
games = {}

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã
@bot.message_handler(commands=['–≤–∏—Å–µ–ª–∏—Ü–∞'])
def start_hangman(message):
    chat_id = message.chat.id
    current_word = random.choice(word_list).lower()
    games[chat_id] = {
        'current_word': current_word,
        'guessed_letters': [],
        'attempts': 0,
        'is_game_active': True
    }
    hidden_word = " ".join(["_" for _ in current_word])
    bot.reply_to(message, f"–ò–≥—Ä–∞ '–í–∏—Å–µ–ª–∏—Ü–∞' –Ω–∞—á–∞–ª–∞—Å—å! üéâ\n–°–ª–æ–≤–æ: {hidden_word}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ–¥–Ω–æ–π –±—É–∫–≤—ã
@bot.message_handler(func=lambda msg: msg.text and len(msg.text) == 1 and msg.text.isalpha())
def hangman_game(message):
    chat_id = message.chat.id
    game = games.get(chat_id)

    if not game or not game['is_game_active']:
        return  # –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å, –µ—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã

    letter = message.text.lower()

    if letter in game['guessed_letters']:
        bot.reply_to(message, f"–¢—ã —É–∂–µ —É–≥–∞–¥—ã–≤–∞–ª —ç—Ç—É –±—É–∫–≤—É: {letter}")
        return

    game['guessed_letters'].append(letter)

    if letter in game['current_word']:
        hidden_word = " ".join([char if char in game['guessed_letters'] else "_" for char in game['current_word']])
        if "_" not in hidden_word:
            game['is_game_active'] = False
            bot.reply_to(message, f"–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã —É–≥–∞–¥–∞–ª —Å–ª–æ–≤–æ: {game['current_word']} üéâ")
        else:
            bot.reply_to(message, f"–£–≥–∞–¥–∞–ª –±—É–∫–≤—É! {hidden_word}")
    else:
        game['attempts'] += 1
        if game['attempts'] >= max_attempts:
            game['is_game_active'] = False
            bot.reply_to(message, f"–¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª! –°–ª–æ–≤–æ –±—ã–ª–æ: {game['current_word']} üíÄ")
        else:
            bot.reply_to(message, f"–ù–µ—Ç —Ç–∞–∫–æ–π –±—É–∫–≤—ã! –û—Å—Ç–∞–ª–æ—Å—å {max_attempts - game['attempts']} –ø–æ–ø—ã—Ç–æ–∫.")


@bot.message_handler(commands=list(interactions.keys()))
def handle_interaction(message):
    print(f"[DEBUG] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text}")
    print(f"[DEBUG] reply_to_message: {message.reply_to_message}")

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –¥—Ä—É–≥–æ–µ
        if message.reply_to_message:
            target_user = message.reply_to_message.from_user
            # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —ç—Ç–æ –Ω–µ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–∞–º–æ–≥–æ –±–æ—Ç–∞
            if target_user.id == bot.get_me().id:
                print("[DEBUG] –≠—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                bot.reply_to(message, "‚õî –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞!")
                return

            # –ü–æ–ª—É—á–∞–µ–º –∏–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            target = target_user.username or target_user.first_name
            sender = message.from_user.username or message.from_user.first_name
            command = message.text.split()[0][1:]  # —É–±–∏—Ä–∞–µ–º "/"

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
            if command not in interactions:
                bot.reply_to(message, "‚õî –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è!")
                return

            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result = random.choice(["success", "fail"])
            interaction_message = interactions[command][result].format(sender=sender, target=target)

            print(f"[DEBUG] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ: {interaction_message}")
            bot.send_message(message.chat.id, interaction_message)

        else:
            print("[DEBUG] –ù–µ –±—ã–ª–æ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
            bot.reply_to(message, "‚õî –ö–æ–º–∞–Ω–¥—É –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞!")

    except Exception as e:
        print(f"[ERROR] –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        bot.reply_to(message, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã.")



#–ö–æ–º–∞–Ω–¥–∞ –∞–Ω–µ–∫–¥–æ—Ç–∞
@bot.message_handler(commands=['–∞–Ω–µ–∫–¥–æ—Ç'])
def send_joke(message):
    try:
        response = requests.get("https://www.anekdot.ru/random/anekdot/")
        soup = BeautifulSoup(response.text, 'html.parser')
        joke = soup.find('div', class_='text').text.strip()
        bot.send_message(message.chat.id, f"üòÇ –ê–Ω–µ–∫–¥–æ—Ç:\n\n{joke}")
    except Exception as e:
        bot.send_message(message.chat.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–Ω–µ–∫–¥–æ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∞–¥–º–∏–Ω–æ–≤ –∏ –æ–Ω–ª–∞–π–Ω —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
@bot.message_handler(commands=['—Å–ø–∏—Å–æ–∫'])
def user_list(message):
    chat_id = message.chat.id

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    try:
        members_count = bot.get_chat_members_count(chat_id)
    except Exception as e:
        bot.send_message(chat_id, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {str(e)}")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    try:
        admins = bot.get_chat_administrators(chat_id)
        admin_count = len(admins)
        # –í Telegram API –Ω–µ—Ç —è–≤–Ω–æ–≥–æ –ø—Ä–∏–∑–Ω–∞–∫–∞ —Ç–æ–≥–æ, —á—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ–Ω–ª–∞–π–Ω, –ø–æ—ç—Ç–æ–º—É "–æ–Ω–ª–∞–π–Ω" –±—É–¥–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å
        online_members = sum(1 for admin in admins if admin.status == 'online')
    except Exception as e:
        bot.send_message(chat_id, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞—Ö: {str(e)}")
        return

    bot.send_message(chat_id,
                     f"üë• –í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {members_count}\nüë§ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {admin_count}\n")


# –ö–æ–º–∞–Ω–¥–∞: –ü–æ–º–æ—â—å –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
@bot.message_handler(commands=['–∞—Ö–µ–ª–ø'])
def admin_help(message):
    try:
        print(f"–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è user_id={message.from_user.id} –≤ —á–∞—Ç–µ {message.chat.id}")
        
        chat_member = bot.get_chat_member(message.chat.id, message.from_user.id)
        user_status = chat_member.status  
        
        print(f"–°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_status}")  # –õ–æ–≥ –≤ –∫–æ–Ω—Å–æ–ª—å

        if user_status in ['administrator', 'creator']:
            bot.reply_to(
                        message,
                                "üõ†Ô∏è <b>*–ü–æ–º–æ—â—å –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:*</b>\n\n"
                                "1Ô∏è‚É£ /–±–∞–Ω &lt;–≤—Ä–µ–º—è&gt; &lt;–ø—Ä–∏—á–∏–Ω–∞&gt; - –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è.\n"
                                "2Ô∏è‚É£ /–º—É—Ç &lt;–≤—Ä–µ–º—è&gt; &lt;–ø—Ä–∏—á–∏–Ω–∞&gt; - –í—ã–¥–∞—Ç—å –º—É—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è.\n"
                                "3Ô∏è‚É£ /—É–¥–∞–ª–∏—Ç—å &lt;–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π&gt; - –£–¥–∞–ª–∏—Ç—å —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π.\n"
                                "4Ô∏è‚É£ /–æ—Ç–ª–æ–∂ - –°–æ–∑–¥–∞—Ç—å –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n"
                                "5Ô∏è‚É£ /—Å–ø–∏—Å–æ–∫-–æ—Ç–ª–æ–∂ - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.",
                                parse_mode='HTML'
                    )
        else:
            bot.reply_to(message, "‚ùó –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

    except Exception as e:
        error_message = f"‚ùó –û—à–∏–±–∫–∞: {e}"
        print(error_message)  # –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
        bot.reply_to(message, error_message)  # –í—ã–≤–æ–¥ –æ—à–∏–±–∫–∏ –≤ —á–∞—Ç



# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –ª–æ–≥–æ–≤
conn = sqlite3.connect('bot_logs.db', check_same_thread=False)
cursor = conn.cursor()

cursor.execute('''
CREATE TABLE IF NOT EXISTS logs (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    sender_username TEXT,
    sender_id INTEGER,
    recipient_username TEXT,
    recipient_id INTEGER,
    message TEXT,
    timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
)
''')
conn.commit()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –∫–µ—à–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_cache = {}


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–∏—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ –±–æ—Ç–∞
@bot.message_handler(commands=['–ª—Å'])
def send_private_message(message):
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
        args = message.text.split(maxsplit=2)
        if len(args) < 3:
            bot.reply_to(message, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /–ª—Å @username <—Ç–µ–∫—Å—Ç>")
            return

        sender_username = message.from_user.username
        sender_id = message.from_user.id
        username = args[1]
        text_to_send = args[2]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ username —Å '@'
        if not username.startswith('@'):
            bot.reply_to(message, "‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ @username.")
            return

        # –£–±–∏—Ä–∞–µ–º '@' –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ API Telegram
        username = username[1:]

        # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–µ—à–µ
        if username in user_cache:
            user_id = user_cache[username]
            bot.send_message(user_id, text_to_send)

            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ª–æ–≥ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            log_message(sender_username, sender_id, username, user_id, text_to_send)

            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –∏–∑ —á–∞—Ç–∞
            bot.delete_message(message.chat.id, message.message_id)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é –≤ –õ–°
            bot.send_message(sender_id, f"‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{username}.")

            return

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —á–µ—Ä–µ–∑ API
        try:
            chat_member = bot.get_chat_member(message.chat.id, message.reply_to_message.from_user.id)
            user_id = chat_member.user.id
        except Exception as e:
            bot.reply_to(message, f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–µ—à
        user_cache[username] = user_id

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        bot.send_message(user_id, text_to_send)

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ª–æ–≥ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        log_message(sender_username, sender_id, username, user_id, text_to_send)

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –∏–∑ —á–∞—Ç–∞
        bot.delete_message(message.chat.id, message.message_id)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é –≤ –õ–°
        bot.send_message(sender_id, f"‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{username}.")

    except Exception as e:
        bot.reply_to(message, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –ª–æ–≥–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
def log_message(sender_username, sender_id, recipient_username, recipient_id, message_text):
    cursor.execute('''
        INSERT INTO logs (sender_username, sender_id, recipient_username, recipient_id, message, timestamp)
        VALUES (?, ?, ?, ?, ?, CURRENT_TIMESTAMP)
    ''', (sender_username, sender_id, recipient_username, recipient_id, message_text))
    conn.commit()


# –ö–æ–º–∞–Ω–¥–∞ /–ª–æ–≥–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
@bot.message_handler(commands=['–ª–æ–≥–∏'])
def show_logs(message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    chat_id = message.chat.id
    user_id = message.from_user.id
    if not is_admin(chat_id, user_id):
        bot.reply_to(message, "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ª–æ–≥–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    cursor.execute('SELECT sender_username, recipient_username, message, timestamp FROM logs')
    logs = cursor.fetchall()

    if not logs:
        bot.send_message(chat_id, "üìÑ –õ–æ–≥–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    log_messages = "üìÑ <b>–õ–æ–≥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:</b>\n\n"
    for log in logs:
        log_messages += f"–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: @{log[0]}\n–ü–æ–ª—É—á–∞—Ç–µ–ª—å: @{log[1]}\n–°–æ–æ–±—â–µ–Ω–∏–µ: {log[2]}\n–î–∞—Ç–∞: {log[3]}\n\n"

    bot.send_message(chat_id, log_messages, parse_mode='HTML')


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
def is_admin(chat_id, user_id):
    member = bot.get_chat_member(chat_id, user_id)
    return member.status in ['administrator', 'creator']


# –ö–æ–º–∞–Ω–¥–∞ /—Å–ø–∞–º –¥–ª—è –∏–Ω–∏—Ü–∏–∞—Ü–∏–∏ —Å–ø–∞–º-—Ä–∞—Å—Å—ã–ª–∫–∏
@bot.message_handler(commands=['—Å–ø–∞–º'])
def request_spam_confirmation(message):
    user_id = message.from_user.id
    chat_id = message.chat.id

    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    markup = types.InlineKeyboardMarkup()
    button_confirm = types.InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_spam_{user_id}")
    button_cancel = types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_spam_{user_id}")
    markup.add(button_confirm, button_cancel)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    bot.send_message(chat_id, "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å —Å–ø–∞–º? –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–ø–∞–º–∞
@bot.callback_query_handler(func=lambda call: call.data.startswith('confirm_spam') or call.data.startswith('cancel_spam'))
def handle_spam_confirmation(call):
    user_id = call.from_user.id
    chat_id = call.message.chat.id
    command_user_id = int(call.data.split('_')[-1])

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞–∂–∏–º–∞–µ—Ç —Ç–æ—Ç –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑—ã–≤–∞–ª –∫–æ–º–∞–Ω–¥—É
    if user_id != command_user_id:
        bot.answer_callback_query(call.id, "–¢–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –≤—ã–∑–≤–∞–≤—à–∏–π –∫–æ–º–∞–Ω–¥—É, –º–æ–∂–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ.")
        return

    if call.data.startswith('confirm_spam'):
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ - –Ω–∞—á–∏–Ω–∞–µ–º —Å–ø–∞–º
        bot.answer_callback_query(call.id, "–í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ —Å–ø–∞–º. –°–ø–∞–º –Ω–∞—á–Ω–µ—Ç—Å—è –≤ –õ–°.")
        bot.send_message(chat_id, "‚úÖ –°–ø–∞–º –Ω–∞—á–∞—Ç! –°–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –∫–∞–∂–¥—É—é 1 —Å–µ–∫—É–Ω–¥—É –≤ –õ–°.")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –õ–° –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–Ω–æ–ø–∫–æ–π "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–ø–∞–º"
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        button_stop = types.KeyboardButton("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–ø–∞–º")
        markup.add(button_stop)
        bot.send_message(user_id, "–°–ø–∞–º –Ω–∞—á–∞–ª—Å—è! –ß—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.", reply_markup=markup)

        # –ó–∞–ø—É—Å–∫ —Å–ø–∞–º–∞ –≤ –õ–° –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        spam_status[user_id] = True
        threading.Thread(target=spam_user, args=(user_id,)).start()

    elif call.data.startswith('cancel_spam'):
        # –û—Ç–º–µ–Ω–∞ —Å–ø–∞–º–∞
        bot.answer_callback_query(call.id, "–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —Å–ø–∞–º.")
        bot.send_message(chat_id, "‚ùå –°–ø–∞–º –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ø–∞–º-—Å–æ–æ–±—â–µ–Ω–∏–π
def spam_user(user_id):
    random_spam_messages = [
        ".", "..", "...", "–ü—Ä–∏–≤–µ—Ç", "–ö–∞–∫ –¥–µ–ª–∞?", "–°–ø–∞–º", "üòÇ", "üòú", "!", "üí¨", "–ß—Ç–æ –Ω–æ–≤–æ–≥–æ?", "?", "!!!",
        "–°–µ–≥–æ–¥–Ω—è –æ—Ç–ª–∏—á–Ω—ã–π –¥–µ–Ω—å", "123", "–•–∞—Ö–∞", "–¢—ã —Ç—É—Ç?", "–í—Å–µ –æ–∫?", "üòÅ", "üëã", "ü§î", "ü§ñ", "üåû", "üåö", "‚≠ê",
        "–ò–≥—Ä–∞–µ—à—å –≤ –∏–≥—Ä—ã?", "–°–º–æ—Ç—Ä–∏—à—å —Ñ–∏–ª—å–º—ã?", "üòâ", "üòé", "–¢—ã –∑–∞–Ω—è—Ç?", "–ß–µ–º –∑–∞–Ω—è—Ç?", "–ê —Ç—ã?", "–ú—è—É", "–ì–∞–≤",
        "–ú–∏—Ä", "–õ—é–±–æ–≤—å", "–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è", "–¢—ã –≤ —Å–µ—Ç–∏?", "–ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç?", "üê±", "üê∂", "üêç", "–ö—Ç–æ —Ç—ã?", "–ß—Ç–æ —Ç—ã?",
        "–ó–∞—á–µ–º?", "–ö—Ç–æ?", "–¢—ã –º–µ–Ω—è —Å–ª—ã—à–∏—à—å?", "üí°", "üî•", "üå™", "‚ùÑ", "üçî", "üçï", "–¢—ã –≥–æ–ª–æ–¥–µ–Ω?", "–Ø –≥–æ–ª–æ–¥–µ–Ω...",
        "–ü—Ä–æ–≥—É–ª–∫–∞?", "üèÉ", "üö∂", "üíº", "üè°", "–í—ã–π–¥–µ—à—å?", "–ö—Ç–æ —Ç–∞–º?", "–û–≥–æ", "–ù–∏—á–µ–≥–æ —Å–µ–±–µ", "üò±", "–î–∞ —Ç—ã —á—Ç–æ!",
        "–û–≥–æ-–≥–æ!", "–¢—ã —Å–µ—Ä—å–µ–∑–Ω–æ?", "–ê –≥–¥–µ —Ç—ã?", "–ù–∞ —Ä–∞–±–æ—Ç–µ?", "–í –æ—Ç–ø—É—Å–∫–µ?", "–ö—Ç–æ?", "–ß—Ç–æ?", "–ó–∞—á–µ–º?",
        "–ü–æ—á–µ–º—É?", "–ö–∞–∫ —Ç–∞–∫?", "–ù–µ—Ä–µ–∞–ª—å–Ω–æ!", "üòÆ", "üòØ", "üò≤", "üôÄ", "–¢—ã —à—É—Ç–∏—à—å?", "–í–∞—É", "üòã", "üòê", "üò¥",
        "ü§Ø", "–¢—ã –∫—Ä—É—Ç–æ–π!", "üí™", "–°–∏–ª–∞", "–ë–æ—Ç –∫—Ä—É—Ç", "–ì–æ—Ç–æ–≤ –∫ —á–µ–º—É-—Ç–æ?", "–ë–æ—Ç –∂–¥–µ—Ç", "–¢—ã –ª—É—á—à–∏–π", "üëç", "üî•",
        "ü•á", "–ó–∞–Ω–∏–º–∞–π—Å—è —Å–ø–æ—Ä—Ç–æ–º", "–õ—é–±–∏—à—å —Å–ª–∞–¥–∫–æ–µ?", "–ö–æ—Ñ–µ –∏–ª–∏ —á–∞–π?", "–ü–æ—Ä–∞ –Ω–∞ –æ—Ç–¥—ã—Ö", "üé¨", "–¢—ã —É–º–Ω—ã–π",
        "–ö–∞–∫–æ–π –ø–ª–∞–Ω?", "üï∞Ô∏è", "–¢—ã –≤ –ø–æ—Ä—è–¥–∫–µ?", "üòä", "üòâ", "–ú–∏—Ä –∏ —Å—á–∞—Å—Ç—å–µ", "–ñ–¥—É –æ—Ç–≤–µ—Ç–∞", "ü§ñ", "ü§ñ", "–¢—ã —Å—Ç—Ä–∞–Ω–Ω—ã–π", "üòú",
        "üíÄ", "üëª", "üîî", "üîï", "ü§ê", "üéÉ", "‚ú®", "üåà", "üõå", "üêæ", "–ë–µ–≥—É –∫ —Ç–µ–±–µ", "–Ø —Ç–µ–±—è –≤–∏–∂—É", "üëÄ", "–ì–¥–µ —Ç—ã –±—ã–ª?",
        "–ü–æ–∫–∞–∂–∏!", "üòé", "–≠—Ç–æ —Å–µ–∫—Ä–µ—Ç", "üí£", "üèÜ", "–ì–¥–µ –æ—Ç–≤–µ—Ç?", "–Ø –∂–¥—É", "–ì–æ–≤–æ—Ä–∏", "üé≤", "üé≠", "üéÆ", "üê∫", "üê∑",
        "üç´", "üöÄ", "ü•∂", "–°—é—Ä–ø—Ä–∏–∑", "üßê", "–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å?", "üî•", "üí¶", "‚ö°", "üåã", "üí®", "–ì—Ä–æ–∑–∞", "–°–æ–ª–Ω—Ü–µ", "–ú–æ—Ä–µ",
        "–†–µ–∫–∞", "üèûÔ∏è", "–ú–∏—Ä –±–µ–∑ –≥—Ä–∞–Ω–∏—Ü", "–¢—ã –¥–æ–º–∞?", "üêæ", "–ö–Ω–∏–≥–∞", "–¢—ã —á–∏—Ç–∞–µ—à—å?", "–ö–∏–Ω–æ", "üé§", "üéß", "üéª",
        "–û, –Ω–µ—Ç", "–ü–æ–±–µ–¥–∞", "üõ¥", "–¢–∏—à–∏–Ω–∞", "–ì—Ä–æ–º–∫–æ", "üòù", "–ö—Ç–æ –∑–¥–µ—Å—å?", "–†—ã—Ü–∞—Ä—å", "–ñ–¥—É", "–°–ø–æ—Ä—Ç", "üéØ",
        "üéº", "üé∑", "üéπ", "üé∏", "üé≤", "–ß—Ç–æ —Ç–≤–æ—Ä–∏—Ç—Å—è?", "–ì–¥–µ –ª—é–¥–∏?", "üç©", "üç™", "üçì", "–¢–∞–Ω—Ü—É–π!", "–•–º...", "ü§î", "–†–æ–∫",
        "üé∫", "–§–∏–Ω–∞–ª", "üêí", "ü¶Å", "ü¶Ñ", "–£–ª—ã–±–Ω–∏—Å—å!", "–¢—ã –≤–µ—Å–µ–ª?", "–†–∞–¥–æ—Å—Ç—å", "–ü–æ–π–¥–µ–º –≥—É–ª—è—Ç—å?", "–ù–∞ —Ä—ã–±–∞–ª–∫—É?",
        "–°–µ–π—á–∞—Å –∏–ª–∏ –Ω–∏–∫–æ–≥–¥–∞", "üìû", "–¢–µ–ª–µ—Ñ–æ–Ω", "üñ•Ô∏è", "–ö—Ä—É—Ç–æ!", "–°–∫–æ—Ä–æ!", "üí•", "–°–µ–∫—É–Ω–¥—É...", "–ß—Ç–æ —ç—Ç–æ –±—ã–ª–æ?",
        "–Ø —Ä–∞–¥", "–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞!", "‚ú®", "–ü–æ–∂–∞—Ä", "‚öΩ", "–§—É—Ç–±–æ–ª?", "–ë–∞—Å–∫–µ—Ç–±–æ–ª", "üèÄ", "‚õ≥", "–•–æ–∫–∫–µ–π", "üèí",
        "–ú–æ–ª–æ–∫–æ", "–ß–∞–π", "–ö–æ—Ñ–µ", "–ü–∏—Ü—Ü–∞", "–†–æ–ª–ª—ã", "–°—É—à–∏", "–¢—ã –≥–¥–µ?", "üèôÔ∏è", "–í –≥–æ—Ä–æ–¥–µ?", "–ü—Ä–æ–≤–µ—Ä—å —ç—Ç–æ",
        "–°–º–µ–π—Å—è!", "–°–ª–∏—à–∫–æ–º –≥—Ä–æ–º–∫–æ", "–°–µ–∫—Ä–µ—Ç", "‚öîÔ∏è", "–ù–∞ –æ—Ö–æ—Ç—É!", "–ñ–¥–∏", "–û–∂–∏–¥–∞–Ω–∏–µ", "üíÉ", "–¢–∞–Ω—Ü—ã",
        "üí™", "–ù–∞ –ø—Ä–æ–≥—É–ª–∫—É", "–°–ø–æ—Ä—Ç", "–ß—Ç–æ-—Ç–æ —Å—Ç—Ä–∞–Ω–Ω–æ–µ", "–ó–∞–≥–∞–¥–∫–∞", "üß©", "–¢—ã —É–º–µ–Ω", "–ü–æ–±–µ–∂–¥–∞–π", "üé®",
        "–ö—Ä–∞—Å–∫–∏", "üå∏", "üåª", "üåº", "üåπ", "–ü—Ä–∞–∑–¥–Ω–∏–∫", "üéâ", "–¢–≤–æ–π –≤—ã–±–æ—Ä", "ü§©", "–¢–∞–π–Ω–∞", "–Ø –Ω–µ –∑–Ω–∞—é", "üêº", "–ü–∞–Ω–¥–∞",
        "–ü–æ–≥–æ–¥–∞", "–ö–ª–∞—Å—Å", "–ú–∞–≥–∏—è", "üßô‚Äç‚ôÇÔ∏è", "–í–æ–ª—à–µ–±—Å—Ç–≤–æ", "üö™", "–ù–∞ –≤—ã—Ö–æ–¥", "‚ö°", "–≠–Ω–µ—Ä–≥–∏—è", "–°–∏–ª–∞!",
        "–ù–∞ –ø—Ä–∏—Ä–æ–¥—É", "üèñÔ∏è", "–ú–æ—Ä–µ", "üå≤", "–î–µ—Ä–µ–≤—å—è", "–ß—Ç–æ –∑–∞ —à—É–º?", "–¢–∏—à–∏–Ω–∞", "–ì—Ä–æ–º", "–ú–æ–ª–Ω–∏—è", "–¢–∞–Ω—Ü—ã!",
        "üöó", "–ê–≤—Ç–æ–º–æ–±–∏–ª—å", "–ü–æ–µ—Ö–∞–ª–∏!", "–°–∫–æ—Ä–æ—Å—Ç—å"
        # –î–æ–±–∞–≤–ª—è–µ–º –µ—â–µ –±–æ–ª—å—à–µ —Ä–∞–Ω–¥–æ–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –æ–∫–æ–ª–æ 500 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
    ]

    while spam_status.get(user_id, False):
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞
        random_spam_message = random.choice(random_spam_messages)

        try:
            bot.send_message(user_id, random_spam_message)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–ø–∞–º-—Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            break

        time.sleep(0.5)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–ø–∞–º–∞ –ø–æ –Ω–∞–∂–∞—Ç–∏—é –∫–Ω–æ–ø–∫–∏ –≤ –õ–°
@bot.message_handler(func=lambda message: message.text == "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–ø–∞–º")
def stop_spam(message):
    user_id = message.from_user.id

    if user_id in spam_status and spam_status[user_id]:
        spam_status[user_id] = False
        bot.send_message(user_id, "‚ùå –°–ø–∞–º –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.", reply_markup=types.ReplyKeyboardRemove())
    else:
        bot.send_message(user_id, "–°–ø–∞–º —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

@bot.message_handler(commands=['—Å–æ–æ–±—â–µ–Ω–∏–µ_–≤_—á–∞—Ç'])
def send_chat_message(message):
    if not is_admin(message.chat.id, message.from_user.id):
        bot.send_message(message.chat.id, "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!")
        return

    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        bot.send_message(message.chat.id, "‚ùó –£–∫–∞–∂–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /—Å–æ–æ–±—â–µ–Ω–∏–µ_–≤_—á–∞—Ç <—Å–æ–æ–±—â–µ–Ω–∏–µ>")
        return

    bot.send_message(message.chat.id, args[1])  # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π
    bot.delete_message(message.chat.id, message.message_id)

# –±–æ—Ç –≤—ã—Ö–æ–¥–∏—Ç –∏–∑ —á–∞—Ç–∞
@bot.message_handler(commands=['hsjahda321sjkdhkad6shjjhkadhjcnkam[wqewqx12]'])
def leave_chat(message):
    chat_id = message.chat.id
    if message.chat.type in ['group', 'supergroup']:
        bot.send_message(chat_id, "–ü–æ–∫–∏–¥–∞—é —á–∞—Ç...")
        bot.leave_chat(chat_id)
    else:
        bot.send_message(chat_id, "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö.")

@bot.message_handler(commands=['—à–∞—Ä'])
def magic_ball(message):
    answers = [
        "–ë–µ–∑ —Å–æ–º–Ω–µ–Ω–∏–π", "–û–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ –¥–∞", "–ù–µ—Å–æ–º–Ω–µ–Ω–Ω–æ", "–ú–æ–∂–µ—à—å –Ω–∞ —ç—Ç–æ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å", "–û—Ç–≤–µ—Ç ‚Äî –¥–∞", "–ê–±—Å–æ–ª—é—Ç–Ω–æ", "–í—Å—ë —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ '–¥–∞'", "–¢–∞–∫ –∏ –±—É–¥–µ—Ç", "–ö–æ–Ω–µ—á–Ω–æ –∂–µ", "–ó–≤—ë–∑–¥—ã –≥–æ–≤–æ—Ä—è—Ç '–¥–∞'",
        "–®–∞–Ω—Å –≤–µ–ª–∏–∫", "–í—Ä–µ–º—è –ø—Ä–∏—à–ª–æ", "–î–∞, –µ—Å–ª–∏ —Ç—ã –≥–æ—Ç–æ–≤", "–ò—Å—Ç–∏–Ω–∞ –≥–æ–≤–æ—Ä–∏—Ç '–¥–∞'", "–≠—Ç–æ –±–ª–∞–≥–æ—Å–ª–æ–≤–ª–µ–Ω–æ", "–î–∞–∂–µ –Ω–µ –æ–±—Å—É–∂–¥–∞–µ—Ç—Å—è","–ù–µ—Ç", "–î–∞–∂–µ –Ω–µ –Ω–∞–¥–µ–π—Å—è", "–û—á–µ–Ω—å –º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ", "–û—Ç–≤–µ—Ç ‚Äî –Ω–µ—Ç",
        "–ù–µ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–π –Ω–∞ —ç—Ç–æ", "–ó–≤—ë–∑–¥—ã –ø—Ä–æ—Ç–∏–≤", "–í—Å—ë –≥–æ–≤–æ—Ä–∏—Ç '–Ω–µ—Ç'", "–≠—Ç–æ –Ω–µ —Å–±—É–¥–µ—Ç—Å—è", "–í—Ä—è–¥ –ª–∏", "–®–∞–Ω—Å–æ–≤ –Ω–µ—Ç", "–û–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ –Ω–µ—Ç", "–ó–∞–ø—Ä–µ—â–µ–Ω–æ", "–í—Å–µ–ª–µ–Ω–Ω–∞—è –≥–æ–≤–æ—Ä–∏—Ç '–Ω–µ—Ç'", "–ù–µ —Å—É–¥—å–±–∞",
        "–ü–ª–æ—Ö–∞—è –∏–¥–µ—è","–°–ø—Ä–æ—Å–∏ –ø–æ–∑–∂–µ", "–°–µ–π—á–∞—Å –Ω–µ –º–æ–≥—É —Å–∫–∞–∑–∞—Ç—å", "–û—Ç–≤–µ—Ç —Ç—É–º–∞–Ω–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞", "–õ—É—á—à–µ –Ω–µ –∑–Ω–∞—Ç—å", "–ù–µ —É–≤–µ—Ä–µ–Ω, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å", "–ú–æ—è –º–∞–≥–∏—è –º–æ–ª—á–∏—Ç", "–í—Å—ë –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å—Å—è",
        "–ë—É–¥—É—â–µ–µ –∑—ã–±–∫–æ", "–í–æ–∑–º–æ–∂–Ω—ã –≤–∞—Ä–∏–∞–Ω—Ç—ã", "–ù–∞ –≥—Ä–∞–Ω–∏", "50/50", "–ù–µ –∏—Å–∫–ª—é—á–µ–Ω–æ", "–¢—É–º–∞–Ω–Ω–∞—è –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–∞", "–†–µ—à–µ–Ω–∏–µ —Å–∫—Ä—ã—Ç–æ", "–°—É–¥—å–±–∞ –∫–æ–ª–µ–±–ª–µ—Ç—Å—è","–ù–∞–¥–µ–π—Å—è, –Ω–æ –Ω–µ –∂–¥–∏", "–î–∞, –Ω–æ —Å –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è–º–∏",
        "–ù–µ—Ç, –Ω–æ —ç—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–æ", "–ú–æ–∂–µ—Ç –±—ã—Ç—å", "–ó–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–µ–±—è", "–°–ª–∏—à–∫–æ–º —Ä–∞–Ω–æ –≥–æ–≤–æ—Ä–∏—Ç—å", "–û—Ç–≤–µ—Ç —Å–∫—Ä—ã—Ç –≤ —Ç–µ–Ω–∏", "–°—É–¥—å–±–∞ –µ—â–µ –Ω–µ –≤—ã–±—Ä–∞–ª–∞", "–≠—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ, –Ω–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ", "–î–∞, –µ—Å–ª–∏ —Ä–∏—Å–∫–Ω–µ—à—å",
        "–°—É–¥—å–±–∞ –ø–æ–¥—Å–∫–∞–∂–µ—Ç –ø–æ–∑–∂–µ", "–í—Å—ë –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤–µ—Ç—Ä–∞", "–ó–≤—ë–∑–¥—ã –µ—â—ë –º–æ–ª—á–∞—Ç", "–°–∏–ª–∞ –≤–Ω–µ –∑–æ–Ω—ã –¥–æ—Å—Ç—É–ø–∞", "–í—Å–µ–ª–µ–Ω–Ω–∞—è –∑–∞–Ω—è—Ç–∞, –ø–µ—Ä–µ–∑–≤–æ–Ω–∏ –ø–æ–∑–∂–µ", "–¢—ã —É–∂–µ –∑–Ω–∞–µ—à—å –æ—Ç–≤–µ—Ç"
    ]
    response = random.choice(answers)
    bot.send_message(message.chat.id, f"üîÆ –ú–∞–≥–∏—á–µ—Å–∫–∏–π —à–∞—Ä –≥–æ–≤–æ—Ä–∏—Ç: {response}")

@bot.message_handler(commands=['–∫–æ–º–ø–ª–∏–º–µ–Ω—Ç'])
def give_compliment(message):
    compliments = [
        "–¢—ã —Å–µ–≥–æ–¥–Ω—è –≤–µ–ª–∏–∫–æ–ª–µ–ø–µ–Ω(–∞)! üòç", "–£ —Ç–µ–±—è –ø–æ—Ç—Ä—è—Å–∞—é—â–∏–π –≤–∫—É—Å! üíé", "–¢—ã —Å–∞–º—ã–π(–∞—è) —è—Ä–∫–∏–π(–∞—è) –≤ —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç–µ! üåü", "–¢–≤–æ—è —É–ª—ã–±–∫–∞ —Å–≤–æ–¥–∏—Ç —Å —É–º–∞! üòÑ", "–£ —Ç–µ–±—è –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è üåü", 
        "–¢—ã –∏–∑–ª—É—á–∞–µ—à—å —Ç–µ–ø–ª–æ ‚òÄÔ∏è", "–° —Ç–æ–±–æ–π –ª–µ–≥–∫–æ –∏ –ø—Ä–∏—è—Ç–Ω–æ üí´", "–¢—ã —É–º–µ–µ—à—å –≤–¥–æ—Ö–Ω–æ–≤–ª—è—Ç—å ‚ú®","–¢—ã –æ—á–µ–Ω—å —Ç–∞–ª–∞–Ω—Ç–ª–∏–≤(–∞) üé®", "–£ —Ç–µ–±—è –æ—Ç–ª–∏—á–Ω—ã–π –≤–∫—É—Å üéÄ", "–¢—ã —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω–æ —É–º—ë–Ω(—É–º–Ω–∞) üß†",
        "–£ —Ç–µ–±—è –∑–∞—Ä–∞–∑–∏—Ç–µ–ª—å–Ω—ã–π —Å–º–µ—Ö üòÇ", "–° —Ç–æ–±–æ–π —Ö–æ—á–µ—Ç—Å—è –æ–±—â–∞—Ç—å—Å—è –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ üìû", "–¢—ã –≤—Å–µ–≥–¥–∞ –≤ —Ç–µ–º–µ üî•","–¢—ã —Å–≤–µ—Ç–∏—à—å—Å—è –∏–∑–Ω—É—Ç—Ä–∏ üí°", "–¢—ã —É–º–µ–µ—à—å —Å–ª—É—à–∞—Ç—å üëÇ", "–° —Ç–æ–±–æ–π —É—é—Ç–Ω–æ, –∫–∞–∫ –¥–æ–º–∞ üè°",
        "–¢—ã —Å–æ–∑–¥–∞—ë—à—å —Ö–æ—Ä–æ—à–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ üåà", "–¢—ã –Ω–∞—Å—Ç–æ—è—â–∏–π –¥—Ä—É–≥ ü§ù", "–£ —Ç–µ–±—è –¥–æ–±—Ä–æ–µ —Å–µ—Ä–¥—Ü–µ ‚ù§Ô∏è", "–¢—ã —Å—Ç–∏–ª—å–Ω—ã–π(–∞—è) üíÉ", "–¢—ã –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—à—å —Å–≤–æ–∏–º –ø—Ä–∏–º–µ—Ä–æ–º üèÜ", "–¢—ã –Ω–∞—Å—Ç–æ—è—â–∏–π —ç—Å—Ç–µ—Ç üé®",
        "–¢–≤–æ—è —Ö–∞—Ä–∏–∑–º–∞ –Ω–µ–æ—Å–ø–æ—Ä–∏–º–∞ üòé","–¢—ã –∑–∞—Ä—è–∂–∞–µ—à—å –ø–æ–∑–∏—Ç–∏–≤–æ–º ‚ö°", "–¢—ã –æ—á–µ–Ω—å –∏—Å–∫—Ä–µ–Ω–Ω–∏–π(–∞—è) üíñ", "–¢—ã –æ—Ç–ª–∏—á–Ω–æ —à—É—Ç–∏—à—å ü§≠", "–¢—ã ‚Äî –Ω–∞—Ö–æ–¥–∫–∞ üíé", "–¢—ã —Å—É–ø–µ—Ä–∑–≤–µ–∑–¥–∞ üåü", "–¢—ã —É–º–µ–µ—à—å —Å–¥–µ–ª–∞—Ç—å –¥–µ–Ω—å –ª—É—á—à–µ üåû",
        "–¢—ã —Ç–≤–æ—Ä–∏—à—å –º–∞–≥–∏—é ‚ú®", "–¢–µ–±—è –ø—Ä–∏—è—Ç–Ω–æ —Å–ª—É—à–∞—Ç—å üéß", "–¢—ã –≤—ã–≥–ª—è–¥–∏—à—å –ø–æ—Ç—Ä—è—Å–∞—é—â–µ üòç", "–¢—ã ‚Äî —Å–∞–º–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å üí™","–¢—ã —Å–∏–ª—å–Ω–µ–µ, —á–µ–º –¥—É–º–∞–µ—à—å üõ°Ô∏è", "–¢—ã —Ç–æ–Ω–∫–æ —á—É–≤—Å—Ç–≤—É–µ—à—å –∞—Ç–º–æ—Å—Ñ–µ—Ä—É üå¨Ô∏è",
        "–¢—ã –≤—Å–µ–≥–¥–∞ –∑–Ω–∞–µ—à—å, —á—Ç–æ —Å–∫–∞–∑–∞—Ç—å üó£Ô∏è", "–¢—ã ‚Äî —Å–≤–µ—Ç –≤ —ç—Ç–æ–º –º–∏—Ä–µ üîÜ", "–¢—ã –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—à—å –¥–≤–∏–≥–∞—Ç—å—Å—è –≤–ø–µ—Ä—ë–¥ üöÄ", "–¢—ã —Å–ª–æ–≤–Ω–æ –≥–ª–æ—Ç–æ–∫ —Å–≤–µ–∂–µ–≥–æ –≤–æ–∑–¥—É—Ö–∞ üçÉ", "–° —Ç–æ–±–æ–π —Ö–æ—á–µ—Ç—Å—è –±—ã—Ç—å –ª—É—á—à–µ üå±",
        "–¢—ã —Ä–∞–∑–±–∏—Ä–∞–µ—à—å—Å—è –≤ –ª—é–¥—è—Ö üëÄ", "–¢—ã —Å–æ–∑–¥–∞—ë—à—å –∫–æ–º—Ñ–æ—Ä—Ç –≤–æ–∫—Ä—É–≥ üõãÔ∏è", "–¢—ã –ø—Ä–∏—Ä–æ–∂–¥—ë–Ω–Ω—ã–π –ª–∏–¥–µ—Ä üß≠","–¢—ã –∏–∑–ª—É—á–∞–µ—à—å –¥–æ–±—Ä–æ—Ç—É üå∑", "–¢—ã —É–º–µ–µ—à—å —É–¥–∏–≤–ª—è—Ç—å üéâ", "–¢—ã –≥–∞—Ä–º–æ–Ω–∏—á–µ–Ω(–∞) –≤–æ –≤—Å—ë–º ‚òØÔ∏è",
        "–¢—ã —É–º–µ–µ—à—å –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –≤–æ–≤—Ä–µ–º—è ü§ó", "–¢—ã –≤—Å–µ–≥–¥–∞ –≤—ã–≥–ª—è–¥–∏—à—å —É–º–µ—Å—Ç–Ω–æ üëî", "–¢—ã —Ç–∞–ª–∞–Ω—Ç–ª–∏–≤(–∞) –≤ –æ–±—â–µ–Ω–∏–∏ üé≠", "–¢–µ–±–µ –º–æ–∂–Ω–æ –¥–æ–≤–µ—Ä—è—Ç—å üîê", "–¢—ã —É–º–µ–µ—à—å –≤–∏–¥–µ—Ç—å –∫—Ä–∞—Å–æ—Ç—É ‚ú®", "–¢—ã –Ω–∞—Å—Ç–æ—è—â–∏–π –≤–¥–æ—Ö–Ω–æ–≤–∏—Ç–µ–ª—å üìñ",
        "–° —Ç–æ–±–æ–π –Ω–µ –±—ã–≤–∞–µ—Ç —Å–∫—É—á–Ω–æ üéà","–¢—ã –∑–∞—Ä—è–∂–∞–µ—à—å –æ–ø—Ç–∏–º–∏–∑–º–æ–º ‚òÄÔ∏è", "–¢—ã –æ—á–µ–Ω—å —á—É—Ç–∫–∏–π(–∞—è) üåä", "–¢—ã —É–º–µ–µ—à—å –≤–∏–¥–µ—Ç—å —Å—É—Ç—å üëÅÔ∏è", "–¢—ã —É–º–µ–µ—à—å –º–µ—á—Ç–∞—Ç—å –∫—Ä–∞—Å–∏–≤–æ ‚òÅÔ∏è", "–¢—ã ‚Äî –ø—Ä–∏–º–µ—Ä –¥–ª—è –ø–æ–¥—Ä–∞–∂–∞–Ω–∏—è üß©",
        "–¢—ã —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω–æ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã–π(–∞—è) üîç", "–¢—ã –ø—Ä–æ—Å—Ç–æ –∫–æ—Å–º–æ—Å üåå", "–¢—ã –æ—á–∞—Ä–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π(–∞—è) üß≤", "–¢—ã –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ –∑–∞–±–æ—Ç–ª–∏–≤—ã–π(–∞—è) üåº", "–¢—ã –Ω–∞—Å—Ç–æ—è—â–∞—è —Ä–µ–¥–∫–æ—Å—Ç—å ü¶Ñ","–¢—ã –¥–µ–ª–∞–µ—à—å –º–∏—Ä –ª—É—á—à–µ üåç",
        "–¢—ã —É–º–µ–µ—à—å –¥–∞—Ä–∏—Ç—å —Ä–∞–¥–æ—Å—Ç—å üéÅ", "–¢—ã –≤—Å–µ–≥–¥–∞ –ø–æ–º–Ω–∏—à—å –≤–∞–∂–Ω–æ–µ üìå", "–¢—ã —Å–≤–µ—Ç–ª–∞—è –ª–∏—á–Ω–æ—Å—Ç—å üí´", "–¢—ã –Ω–∞—Ö–æ–¥—á–∏–≤—ã–π(–∞—è) üß†", "–¢—ã –≤—Å–µ–≥–¥–∞ –Ω–∞ –≤—ã—Å–æ—Ç–µ üèîÔ∏è", "–¢—ã –æ–±–ª–∞–¥–∞–µ—à—å —Ö–æ—Ä–æ—à–∏–º –≤–∫—É—Å–æ–º üç∑",
        "–¢—ã –Ω–∞—Å—Ç–æ—è—â–∏–π –º–∞—Å—Ç–µ—Ä —Å–≤–æ–µ–≥–æ –¥–µ–ª–∞ üõ†Ô∏è", "–¢—ã —É–º–µ–µ—à—å –≤–¥–æ—Ö–Ω–æ–≤–ª—è—Ç—å –Ω–∞ –ø–µ—Ä–µ–º–µ–Ω—ã üîÑ", "–¢—ã –∫–∞–∫ –≤–µ—Å–Ω–∞ ‚Äî –ø—Ä–∏–Ω–æ—Å–∏—à—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ üå∏","–¢—ã –æ—á–µ–Ω—å –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã–π(–∞—è) —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ üìö", "–¢—ã —É–º–µ–µ—à—å –±—ã—Ç—å –≤ –º–æ–º–µ–Ω—Ç–µ ‚è≥",
        "–¢—ã –∏—Å–∫—Ä–µ–Ω–Ω–µ —Ä–∞–¥—É–µ—à—å—Å—è –∑–∞ –¥—Ä—É–≥–∏—Ö ü•≥", "–¢—ã —É–º–µ–µ—à—å —Å–ª—É—à–∞—Ç—å —Å–µ—Ä–¥—Ü–µ–º ‚ù§Ô∏è", "–¢—ã –æ—á–µ–Ω—å –æ–±–∞—è—Ç–µ–ª—å–Ω—ã–π(–∞—è) üß°", "–¢—ã —Å–æ–∑–¥–∞—ë—à—å –∫—Ä–∞—Å–æ—Ç—É –∏–∑ –Ω–∏—á–µ–≥–æ üñåÔ∏è", "–¢—ã –ø—Ä–∏—è—Ç–Ω—ã–π —Å—é—Ä–ø—Ä–∏–∑ üéÄ", "–¢—ã ‚Äî —á—É–¥–æ üéá",
        "–¢—ã –Ω–µ–∑–∞–º–µ–Ω–∏–º(–∞) üîß", "–¢—ã –≤–æ—Å—Ö–∏—Ç–∏—Ç–µ–ª–µ–Ω(–≤–æ—Å—Ö–∏—Ç–∏—Ç–µ–ª—å–Ω–∞) ü§©","–¢—ã ‚Äî –≥–µ–Ω–∏–π –¥–µ—Ç–∞–ª–µ–π üßµ", "–¢—ã –∫–∞–∫ –∫–æ—Ñ–µ —Å —É—Ç—Ä–∞ ‚Äî –±–æ–¥—Ä–∏—à—å ‚òï", "–¢—ã –¥–∞—Ä–∏—à—å —É—é—Ç üî•",
        "–¢—ã ‚Äî –∫–∞–∫ –∫–Ω–∏–≥–∞, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—Ç—Å—è –ø–µ—Ä–µ—á–∏—Ç—ã–≤–∞—Ç—å üìñ", "–¢—ã —É–º–µ–µ—à—å –≤–¥–æ—Ö–Ω–æ–≤–∏—Ç—å –Ω–∞ —Å–º–µ–ª–æ—Å—Ç—å ü¶Å", "–¢—ã –ø—Ä–∏—Ç—è–≥–∏–≤–∞–µ—à—å —Ö–æ—Ä–æ—à–µ–µ üå†", "–¢—ã –≤—ã–∑—ã–≤–∞–µ—à—å —É–≤–∞–∂–µ–Ω–∏–µ üéì", "–¢—ã —É–º–µ–µ—à—å –±—ã—Ç—å –Ω–∞—Å—Ç–æ—è—â–∏–º(–µ–π) ü™û",
        "–¢—ã –Ω–∞–ø–æ–ª–Ω–µ–Ω(–∞) —Å–≤–µ—Ç–æ–º üí°", "–¢—ã —Å–æ–∑–¥–∞—ë—à—å –º–∞–≥–∏—é –æ–±—â–µ–Ω–∏—è ‚ú®","–¢—ã —Å–∏—è–µ—à—å –¥–æ–±—Ä–æ—Ç–æ–π üåü", "–¢—ã –¥–µ–ª–∞–µ—à—å —Å–ª–æ–∂–Ω–æ–µ –ø—Ä–æ—Å—Ç—ã–º üîé", "–¢—ã —É–º–µ–µ—à—å —Ä–∞–¥–æ–≤–∞—Ç—å—Å—è –º–µ–ª–æ—á–∞–º üçÄ", "–¢—ã –Ω–∞—Å—Ç–æ—è—â–∏–π –∫–ª–∞–¥ üí∞",
        "–¢—ã –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ —Ä–∞–∑–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–π(–∞—è) üé≤", "–¢—ã —É–º–µ–µ—à—å –¥–µ—Ä–∂–∞—Ç—å —É–¥–∞—Ä ü•ä", "–¢—ã —á—É–≤—Å—Ç–≤—É–µ—à—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –¥—Ä—É–≥–∏—Ö üéº", "–¢—ã —É–º–µ–µ—à—å –±—ã—Ç—å —Å–æ–±–æ–π üåø", "–¢—ã –ª–µ–≥–∫–æ –∑–∞–∂–∏–≥–∞–µ—à—å —Å–µ—Ä–¥—Ü–∞ üî•",
        "–¢—ã –æ—Å—Ç–∞–≤–ª—è–µ—à—å —Å–ª–µ–¥ –≤ –¥—É—à–µ üñãÔ∏è", "–ú–ê–Ø–Ø–Ø ‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è", "–ö–†–ê–°–û–¢–ö–ê–ê–ê üíïüíïüíïüíïüíï"
    ]
    compliment_title = [
    "–ö–æ–º–ø–ª–∏–º–µ–Ω—Ç –¥–ª—è —Ç–µ–±—è! üòä", "–¢–µ–±–µ –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç! üòò", "–°—É–ø–µ—Ä-–∫–æ–º–ø–ª–∏–º–µ–Ω—Ç! üåü", "–ö–æ–º–ø–ª–∏–º–µ–Ω—Ç –æ—Ç —Å–µ—Ä–¥—Ü–∞! ‚ù§Ô∏è",
    "–î–ª—è —Ç–µ–±—è ‚Äî —Å —Ç–µ–ø–ª–æ–º ü´∂","–¢—ã –∑–∞—Å–ª—É–∂–∏–≤–∞–µ—à—å –ª—É—á—à–∏—Ö —Å–ª–æ–≤! ü•∞", "–¢—ã ‚Äî —á—É–¥–æ! üåà",
    "–õ—É—á–∏–∫ —Å–≤–µ—Ç–∞ –¥–ª—è —Ç–µ–±—è ‚òÄÔ∏è", "–° –ª—é–±–æ–≤—å—é ‚Äî —Ç–µ–±–µ üíñ",
    "–¢—ã —ç—Ç–æ–≥–æ –¥–æ—Å—Ç–æ–∏–Ω(–∞)! üèÖ", "–ü–æ–π–º–∞–π –¥–æ–±—Ä—ã–µ –≤–∏–±—Ä–∞—Ü–∏–∏! ‚ú®", "–¢–µ–ø–ª–æ –≤–Ω—É—Ç—Ä–∏ ‚Äî —Ç–µ–±–µ üí´",
    "–°–µ–≥–æ–¥–Ω—è ‚Äî —Ç–≤–æ–π –¥–µ–Ω—å! üéà", "–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ–±—è üéÅ", "–¢–µ–±–µ ‚Äî —Å –¥–æ–±—Ä–æ–º üå∑", "–õ–æ–≤–∏ –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç! üéØ"
    ]
    compliment = random.choice(compliments)
    compliment_title = random.choice(compliment_title)
    bot.send_message(message.chat.id, f"<b>{compliment_title}</b>\n\n{compliment}", parse_mode="HTML")


# Storage directory for scheduled messages
STORAGE_DIR = 'scheduled_messages'

# Ensure the storage directory exists
if not os.path.exists(STORAGE_DIR):
    os.makedirs(STORAGE_DIR)

user_states = {}  # {user_id: state_data}


# Helper functions
def is_admin(chat_id, user_id):
    try:
        member = bot.get_chat_member(chat_id, user_id)
        return member.status in ['administrator', 'creator']
    except:
        return False

def send_hint(chat_id, text):
    bot.send_message(chat_id, f"{EMOJI_INFO} {text}")

def get_scheduled_messages(chat_id):
    filepath = os.path.join(STORAGE_DIR, f'{chat_id}.json')
    if os.path.exists(filepath):
        with open(filepath, 'r', encoding='utf-8') as f:
            return json.load(f)
    else:
        return {}

def save_scheduled_messages(chat_id, data):
    filepath = os.path.join(STORAGE_DIR, f'{chat_id}.json')
    with open(filepath, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=4)

def schedule_message(chat_id, name, data):
    def send_scheduled_message():
        if data['files']:
            media_group = []
            for file_id in data['files']:
                media_group.append(types.InputMediaDocument(file_id))
            bot.send_media_group(chat_id, media_group)
        if data['text']:
            bot.send_message(chat_id, data['text'])
        # Reschedule if needed
        if data.get('repeat'):
            if data['type'] == 'weekly':
                next_time = datetime.now() + timedelta(weeks=1)
                delay = (next_time - datetime.now()).total_seconds()
                threading.Timer(delay, send_scheduled_message).start()
    # Calculate delay
    if data['type'] == 'date':
        scheduled_time = datetime.strptime(data['datetime'], '%H:%M:%d.%m')
        scheduled_time = scheduled_time.replace(year=datetime.now().year)
        delay = (scheduled_time - datetime.now()).total_seconds()
        if delay < 0:
            return  # Time has passed
    elif data['type'] == 'weekly':
        weekday_numbers = {'–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫':0, '–≤—Ç–æ—Ä–Ω–∏–∫':1, '—Å—Ä–µ–¥–∞':2, '—á–µ—Ç–≤–µ—Ä–≥':3, '–ø—è—Ç–Ω–∏—Ü–∞':4, '—Å—É–±–±–æ—Ç–∞':5, '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ':6}
        today = datetime.now()
        target_weekday = weekday_numbers[data['day'].lower()]
        days_ahead = target_weekday - today.weekday()
        if days_ahead <= 0:
            days_ahead += 7
        next_time = today + timedelta(days=days_ahead)
        time_parts = [int(part) for part in data['time'].split(':')]
        next_time = next_time.replace(hour=time_parts[0], minute=time_parts[1], second=0, microsecond=0)
        delay = (next_time - datetime.now()).total_seconds()
    else:
        return
    # Start timer
    threading.Timer(delay, send_scheduled_message).start()

def load_and_schedule_all():
    for filename in os.listdir(STORAGE_DIR):
        if filename.endswith('.json'):
            chat_id = int(filename.replace('.json', ''))
            scheduled = get_scheduled_messages(chat_id)
            for name, data in scheduled.items():
                schedule_message(chat_id, name, data)

# Command handlers
@bot.message_handler(commands=['–æ—Ç–ª–æ–∂'])
def handle_otloj(message):
    chat_id = message.chat.id
    user_id = message.from_user.id
    if not is_admin(chat_id, user_id):
        bot.reply_to(message, f"{EMOJI_CROSS} –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    markup.add('–ü–æ –¥–∞—Ç–µ', '–ü–æ –¥–Ω—é –Ω–µ–¥–µ–ª–∏')
    msg = bot.send_message(chat_id, f"{EMOJI_CALENDAR} –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ –¥–∞—Ç–µ –∏–ª–∏ –¥–Ω—é –Ω–µ–¥–µ–ª–∏?", reply_markup=markup)
    user_states[user_id] = {'step': 'choose_type', 'chat_id': chat_id}
    bot.register_next_step_handler(msg, process_type_choice)


def process_type_choice(message):
    user_id = message.from_user.id
    state = user_states.get(user_id)

    if not state or state.get('step') != 'choose_type':
        return

    choice = message.text.strip().lower()

    if choice == '–ø–æ –¥–∞—Ç–µ':
        send_hint(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú:–î–î.–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30:25.12)")
        # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        msg = bot.send_message(
            message.chat.id,
            f"{EMOJI_CLOCK} –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É:",
            reply_markup=types.ReplyKeyboardRemove()  # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        )
        state['step'] = 'enter_date'
        bot.register_next_step_handler(msg, process_date_entry)

    elif choice == '–ø–æ –¥–Ω—é –Ω–µ–¥–µ–ª–∏':
        send_hint(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫)")
        # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        msg = bot.send_message(
            message.chat.id,
            f"{EMOJI_CALENDAR} –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:",
            reply_markup=types.ReplyKeyboardRemove()  # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        )
        state['step'] = 'enter_weekday'
        bot.register_next_step_handler(msg, process_weekday_entry)

    else:
        bot.send_message(message.chat.id, f"{EMOJI_CROSS} –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        handle_otloj(message)


def process_date_entry(message):
    user_id = message.from_user.id
    state = user_states.get(user_id)
    date_str = message.text.strip()
    try:
        datetime.strptime(date_str, '%H:%M:%d.%m')
        state['datetime'] = date_str
        state['type'] = 'date'
        state['step'] = 'enter_content'
        send_hint(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏/–∏–ª–∏ –¥–æ 5 —Ñ–∞–π–ª–æ–≤. –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 20 –ú–ë.")
        msg = bot.send_message(message.chat.id, f"{EMOJI_ARROW} –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à —Ç–µ–∫—Å—Ç –∏/–∏–ª–∏ —Ñ–∞–π–ª—ã:")
        bot.register_next_step_handler(msg, process_content_entry)
    except ValueError:
        bot.send_message(message.chat.id, f"{EMOJI_CROSS} –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        process_type_choice(message)

def process_weekday_entry(message):
    user_id = message.from_user.id
    state = user_states.get(user_id)
    day = message.text.strip().lower()
    valid_days = ['–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–≤—Ç–æ—Ä–Ω–∏–∫', '—Å—Ä–µ–¥–∞', '—á–µ—Ç–≤–µ—Ä–≥', '–ø—è—Ç–Ω–∏—Ü–∞', '—Å—É–±–±–æ—Ç–∞', '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']
    if day in valid_days:
        state['day'] = day
        state['type'] = 'weekly'
        state['step'] = 'enter_time'
        send_hint(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30)")
        msg = bot.send_message(message.chat.id, f"{EMOJI_CLOCK} –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è:")
        bot.register_next_step_handler(msg, process_time_entry)
    else:
        bot.send_message(message.chat.id, f"{EMOJI_CROSS} –ù–µ–≤–µ—Ä–Ω—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        process_type_choice(message)

def process_time_entry(message):
    user_id = message.from_user.id
    state = user_states.get(user_id)
    time_str = message.text.strip()
    if re.match(r'^\d{1,2}:\d{2}$', time_str):
        state['time'] = time_str
        state['step'] = 'enter_content'
        send_hint(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏/–∏–ª–∏ –¥–æ 5 —Ñ–∞–π–ª–æ–≤. –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 20 –ú–ë.")
        msg = bot.send_message(message.chat.id, f"{EMOJI_ARROW} –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à —Ç–µ–∫—Å—Ç –∏/–∏–ª–∏ —Ñ–∞–π–ª—ã:")
        bot.register_next_step_handler(msg, process_content_entry)
    else:
        bot.send_message(message.chat.id, f"{EMOJI_CROSS} –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        process_weekday_entry(message)

def process_content_entry(message):
    user_id = message.from_user.id
    state = user_states.get(user_id)
    if 'text' not in state:
        state['text'] = ''
    if message.text:
        state['text'] += message.text
    if len(state['text']) > 4096:
        bot.send_message(message.chat.id, f"{EMOJI_CROSS} –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Å–∏–º–≤–æ–ª–æ–≤ (–º–∞–∫—Å–∏–º—É–º 4096).")
        state['text'] = state['text'][:4096]
    if 'files' not in state:
        state['files'] = []
    if message.document:
        file_id = message.document.file_id
        state['files'].append(file_id)
    # Check for more files
    if len(state['files']) < 5:
        msg = bot.send_message(message.chat.id, f"{EMOJI_ARROW} –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â—ë —Ñ–∞–π–ª—ã –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ `/stop` –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.")
        bot.register_next_step_handler(msg, process_additional_files)
    else:
        ask_repeat(message)

def process_additional_files(message):
    user_id = message.from_user.id
    state = user_states.get(user_id)
    if message.text and message.text.strip() == '/stop':
        ask_repeat(message)
        return
    if message.document:
        file_id = message.document.file_id
        state['files'].append(file_id)
    if message.text:
        state['text'] += message.text
        if len(state['text']) > 4096:
            bot.send_message(message.chat.id, f"{EMOJI_CROSS} –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Å–∏–º–≤–æ–ª–æ–≤ (–º–∞–∫—Å–∏–º—É–º 4096).")
            state['text'] = state['text'][:4096]
    if len(state['files']) < 5:
        msg = bot.send_message(message.chat.id, f"{EMOJI_ARROW} –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â—ë —Ñ–∞–π–ª—ã –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ '/stop' –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.")
        bot.register_next_step_handler(msg, process_additional_files)
    else:
        ask_repeat(message)

def ask_repeat(message):
    user_id = message.from_user.id
    state = user_states.get(user_id)
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    markup.add('–î–∞', '–ù–µ—Ç')
    msg = bot.send_message(message.chat.id, f"{EMOJI_CLOCK} –ü–æ–≤—Ç–æ—Ä—è—Ç—å —Ä–µ–≥—É–ª—è—Ä–Ω–æ?", reply_markup=markup)
    state['step'] = 'confirm_repeat'
    bot.register_next_step_handler(msg, process_repeat_choice)

def process_repeat_choice(message):
    user_id = message.from_user.id
    state = user_states.get(user_id)
    choice = message.text.strip().lower()
    state['repeat'] = choice == '–¥–∞'
    # Ask for name
    send_hint(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")
    msg = bot.send_message(message.chat.id, f"{EMOJI_ARROW} –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
    state['step'] = 'enter_name'
    bot.register_next_step_handler(msg, process_name_entry)

def process_name_entry(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    state = user_states.get(user_id)
    name = message.text.strip()
    scheduled = get_scheduled_messages(chat_id)
    if name in scheduled:
        bot.send_message(chat_id, f"{EMOJI_CROSS} –ù–∞–∑–≤–∞–Ω–∏–µ —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ.")
        process_repeat_choice(message)
        return
    # Confirm
    state['name'] = name
    confirmation = f"{EMOJI_CHECK} –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ:\n–ù–∞–∑–≤–∞–Ω–∏–µ: {name}\n"
    if state['type'] == 'date':
        confirmation += f"–î–∞—Ç–∞: {state['datetime']}\n"
    else:
        confirmation += f"–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏: {state['day'].capitalize()} –≤ {state['time']}\n"
    confirmation += f"–¢–µ–∫—Å—Ç: {state['text']}\n–§–∞–π–ª—ã: {len(state['files'])}\n"
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    markup.add('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', '–û—Ç–º–µ–Ω–∏—Ç—å')
    msg = bot.send_message(chat_id, confirmation, reply_markup=markup)
    state['step'] = 'confirm_save'
    bot.register_next_step_handler(msg, process_save_confirmation)

def process_save_confirmation(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    state = user_states.get(user_id)
    choice = message.text.strip().lower()

    if choice == '–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å':
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        scheduled = get_scheduled_messages(chat_id)
        scheduled[state['name']] = state.copy()
        save_scheduled_messages(chat_id, scheduled)
        # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        bot.send_message(
            chat_id,
            f"{EMOJI_CHECK} –û—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!",
            reply_markup=types.ReplyKeyboardRemove()  # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        )
        schedule_message(chat_id, state['name'], state)
        user_states.pop(user_id)

    else:
        # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ
        bot.send_message(
            chat_id,
            f"{EMOJI_CROSS} –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=types.ReplyKeyboardRemove()  # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        )
        user_states.pop(user_id)

@bot.message_handler(commands=['—Å–ø–∏—Å–æ–∫-–æ—Ç–ª–æ–∂'])
def handle_list_scheduled(message):
    chat_id = message.chat.id
    user_id = message.from_user.id
    if not is_admin(chat_id, user_id):
        bot.reply_to(message, f"{EMOJI_CROSS} –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    scheduled = get_scheduled_messages(chat_id)
    if not scheduled:
        bot.send_message(chat_id, f"{EMOJI_CROSS} –ù–µ—Ç –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.")
        return
    markup = types.InlineKeyboardMarkup()
    for name in scheduled:
        markup.add(types.InlineKeyboardButton(text=name, callback_data=f"view_{name}"))
    bot.send_message(chat_id, f"{EMOJI_CLOCK} –û—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('view_'))
def callback_view_scheduled(call):
    user_id = call.from_user.id
    chat_id = call.message.chat.id
    if not is_admin(chat_id, user_id):
        bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    name = call.data[5:]
    scheduled = get_scheduled_messages(chat_id)
    data = scheduled.get(name)
    if not data:
        bot.answer_callback_query(call.id, "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return
    text = f"–ù–∞–∑–≤–∞–Ω–∏–µ: {name}\n"
    if data['type'] == 'date':
        text += f"–î–∞—Ç–∞: {data['datetime']}\n"
    else:
        text += f"–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏: {data['day'].capitalize()} –≤ {data['time']}\n"
    text += f"–¢–µ–∫—Å—Ç: {data['text']}\n–§–∞–π–ª—ã: {len(data['files'])}\n"
    bot.send_message(chat_id, text)
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton(text=f"{EMOJI_DELETE} –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{name}"),
        types.InlineKeyboardButton(text=f"{EMOJI_EDIT} –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_{name}")
    )
    bot.send_message(chat_id, "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('delete_'))
def callback_delete_scheduled(call):
    user_id = call.from_user.id
    chat_id = call.message.chat.id
    if not is_admin(chat_id, user_id):
        bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    name = call.data[7:]
    scheduled = get_scheduled_messages(chat_id)
    if name not in scheduled:
        bot.answer_callback_query(call.id, "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    markup.add('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', '–û—Ç–º–µ–Ω–∏—Ç—å')
    msg = bot.send_message(chat_id, f"{EMOJI_CROSS} –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å '{name}'?", reply_markup=markup)
    user_states[user_id] = {'action': 'delete', 'name': name, 'chat_id': chat_id}
    bot.register_next_step_handler(msg, process_delete_confirmation)

def process_delete_confirmation(message):
    user_id = message.from_user.id
    state = user_states.get(user_id)
    if not state or state.get('action') != 'delete':
        return
    choice = message.text.strip().lower()
    chat_id = state['chat_id']
    name = state['name']
    if choice == '–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å':
        scheduled = get_scheduled_messages(chat_id)
        scheduled.pop(name, None)
        save_scheduled_messages(chat_id, scheduled)
        bot.send_message(chat_id, f"{EMOJI_CHECK} –°–æ–æ–±—â–µ–Ω–∏–µ '{name}' —É–¥–∞–ª–µ–Ω–æ.")
    else:
        bot.send_message(chat_id, f"{EMOJI_CROSS} –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    user_states.pop(user_id)

# Load and schedule messages on startup
load_and_schedule_all()


def search_wikipedia_text(query):
    try:
        url = f"https://ru.wikipedia.org/wiki/{query.replace(' ', '_')}"
        headers = {"User-Agent": "Mozilla/5.0"}
        response = requests.get(url, headers=headers)
        
        if response.status_code == 404:
            return "‚ùå –°—Ç–∞—Ç—å—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –í–∏–∫–∏–ø–µ–¥–∏–∏."

        soup = BeautifulSoup(response.text, "html.parser")
        paragraphs = soup.select("p")
        for p in paragraphs:
            text = p.get_text(strip=True)
            if text and len(text) > 50:
                return f"üìò {text}\nüîó {url}"
        return f"üîó –°—Ç–∞—Ç—å—è –Ω–∞–π–¥–µ–Ω–∞, –Ω–æ —Ç–µ–∫—Å—Ç –ø—É—Å—Ç–æ–π: {url}"
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ search_wikipedia_text: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å—Ç–∞—Ç—å–∏ –≤ –í–∏–∫–∏–ø–µ–¥–∏–∏."


def search_google_image(query):
    url = f"https://www.google.com/search?tbm=isch&q={query}"
    headers = {"User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64)"}
    response = requests.get(url, headers=headers)
    soup = BeautifulSoup(response.text, "html.parser")
    image_results = soup.find_all("img")
    if len(image_results) > 1:
        image_srcs = [img['src'] for img in image_results[1:] if img.get('src')]
        return random.choice(image_srcs) if image_srcs else "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."
    return "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."

def search_youtube_video(query):
    try:
        results = YoutubeSearch(query, max_results=1).to_dict()
        if results:
            song = results[0]
            url = f"https://www.youtube.com{song['url_suffix']}"
            title = song['title']
            return f"‚ñ∂Ô∏è –í–∏–¥–µ–æ –Ω–∞–π–¥–µ–Ω–æ: {title}\nüîó {url}"
        return "‚ùå –í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ search_youtube_video: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤–∏–¥–µ–æ."

@bot.message_handler(commands=['–Ω–∞–π—Ç–∏'])
def google_search(message):
    try:
        parts = message.text.split(maxsplit=2)
        if len(parts) < 3:
            raise ValueError
        content_type, query = parts[1], parts[2]

        if content_type == "—Ç–µ–∫—Å—Ç":
            result = search_wikipedia_text(query)
            markup = create_refresh_button(content_type, query)
            bot.send_message(message.chat.id, f"–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞: {result}", reply_markup=markup)
        elif content_type == "–∫–∞—Ä—Ç–∏–Ω–∫—É":
            result = search_google_image(query)
            markup = create_refresh_button(content_type, query)
            bot.send_photo(message.chat.id, result, reply_markup=markup)
        elif content_type == "–≤–∏–¥–µ–æ":
            result = search_youtube_video(query)
            markup = create_refresh_button(content_type, query)
            bot.send_message(message.chat.id, f"–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ: {result}", reply_markup=markup)
        else:
            bot.send_message(message.chat.id, "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /–Ω–∞–π—Ç–∏ <—Ç–µ–∫—Å—Ç|–∫–∞—Ä—Ç–∏–Ω–∫—É|–≤–∏–¥–µ–æ> <–∑–∞–ø—Ä–æ—Å>.")
    except:
        bot.send_message(message.chat.id, "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /–Ω–∞–π—Ç–∏ <—Ç–µ–∫—Å—Ç|–∫–∞—Ä—Ç–∏–Ω–∫—É|–≤–∏–¥–µ–æ> <–∑–∞–ø—Ä–æ—Å>.")

def create_refresh_button(content_type, query):
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–ø—Ä–æ—Å–∏—Ç—å", callback_data=f"refresh_{content_type}_{query}"))
    return markup

@bot.callback_query_handler(func=lambda call: call.data.startswith('refresh'))
def refresh_search(call):
    try:
        _, content_type, query = call.data.split('_', 2)

        if content_type == "—Ç–µ–∫—Å—Ç":
            result = search_wikipedia_text(query)
            markup = create_refresh_button(content_type, query)
            bot.edit_message_text(f"–û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞: {result}", chat_id=call.message.chat.id,
                                  message_id=call.message.message_id, reply_markup=markup)
        elif content_type == "–∫–∞—Ä—Ç–∏–Ω–∫–∞":
            result = search_google_image(query)
            markup = create_refresh_button(content_type, query)
            bot.edit_message_media(media=types.InputMediaPhoto(result), chat_id=call.message.chat.id,
                                   message_id=call.message.message_id, reply_markup=markup)
        elif content_type == "–≤–∏–¥–µ–æ":
            result = search_youtube_video(query)
            markup = create_refresh_button(content_type, query)
            bot.edit_message_text(f"–û–±–Ω–æ–≤–ª—ë–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ: {result}", chat_id=call.message.chat.id,
                                  message_id=call.message.message_id, reply_markup=markup)
    except:
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


# –®–∞–≥ 1-2: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
@bot.message_handler(commands=['—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞'])
def send_location_request(message):
    user_info = {
        'user_id': message.from_user.id,
        'first_name': message.from_user.first_name,
        'last_name': message.from_user.last_name,
        'username': message.from_user.username
    }
    print(f"[–ö–û–ú–ê–ù–î–ê /—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞] –ü–æ–ª—É—á–µ–Ω–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_info}")

    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    location_button = types.KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é", request_location=True)
    markup.add(location_button)
    bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é:", reply_markup=markup)

# –®–∞–≥ 3-5: –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–π –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏
@bot.message_handler(content_types=['location'])
def handle_location(message):
    user_info = {
        'user_id': message.from_user.id,
        'first_name': message.from_user.first_name,
        'last_name': message.from_user.last_name,
        'username': message.from_user.username
    }
    lat = message.location.latitude
    lon = message.location.longitude

    print(f"[–ì–ï–û–ü–û–õ–û–ñ–ï–ù–ò–ï] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_info}")
    print(f"[–ì–ï–û–ü–û–õ–û–ñ–ï–ù–ò–ï] –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: —à–∏—Ä–æ—Ç–∞ = {lat}, –¥–æ–ª–≥–æ—Ç–∞ = {lon}")

    weather_url = (
        f"http://api.openweathermap.org/data/2.5/weather?"
        f"lat={lat}&lon={lon}&appid={API}&units=metric&lang=ru"
    )

    try:
        response = requests.get(weather_url, timeout=5)
        response.raise_for_status()  # –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å—Ç–∞—Ç—É—Å–µ 4xx/5xx
        data = response.json()

        print(f"[–û–¢–í–ï–¢ OWM] –°—Ç–∞—Ç—É—Å: {response.status_code}")
        print(f"[–û–¢–í–ï–¢ OWM] –î–∞–Ω–Ω—ã–µ: {data}")

        temp = data['main']['temp']
        humidity = data['main']['humidity']
        city = data.get('name', '–í–∞—à —Ä–∞–π–æ–Ω')

        print(f"[–ü–û–ì–û–î–ê] –ì–æ—Ä–æ–¥: {city}, –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C, –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%")

        weather_text = (
            f"üåç –ü–æ–≥–æ–¥–∞ –≤ <b>{city}</b>:\n"
            f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: <b>{temp}¬∞C</b>\n"
            f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: <b>{humidity}%</b>"
        )

        bot.send_message(message.chat.id, weather_text, parse_mode='HTML', reply_markup=types.ReplyKeyboardRemove())

    except requests.exceptions.RequestException as e:
        print(f"[–û–®–ò–ë–ö–ê HTTP] {e}")
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=types.ReplyKeyboardRemove())
# üß≠ –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –≥–æ—Ä–æ–¥–∞
def get_coordinates(city):
    url = f"http://api.openweathermap.org/geo/1.0/direct?q={city}&limit=1&appid={API}"
    response = requests.get(url).json()
    if response:
        return response[0]['lat'], response[0]['lon']
    return None, None

# üå§Ô∏è –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ –±–ª–∏–∂–∞–π—à–µ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –¥–∞—Ç—ã
def get_forecast(lat, lon, target_date):
    url = f"http://api.openweathermap.org/data/2.5/forecast?lat={lat}&lon={lon}&appid={API}&units=metric&lang=ru"
    response = requests.get(url).json()
    for entry in response['list']:
        if target_date in entry['dt_txt']:
            return entry
    return None

# üé® –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–≤–æ–¥ –ø—Ä–æ–≥–Ω–æ–∑–∞
def format_forecast(data, city, target_date):
    weather_desc = data['weather'][0]['description']
    emoji_map = {
        "—è—Å–Ω–æ": "‚òÄÔ∏è", "–Ω–µ–±–æ–ª—å—à–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å": "üå§Ô∏è",
        "–æ–±–ª–∞—á–Ω–æ —Å –ø—Ä–æ—è—Å–Ω–µ–Ω–∏—è–º–∏": "‚õÖ", "–ø–∞—Å–º—É—Ä–Ω–æ": "‚òÅÔ∏è",
        "–¥–æ–∂–¥—å": "üåßÔ∏è", "–≥—Ä–æ–∑–∞": "‚õàÔ∏è", "—Å–Ω–µ–≥": "‚ùÑÔ∏è",
        "—Ç—É–º–∞–Ω": "üå´Ô∏è"
    }
    emoji = emoji_map.get(weather_desc.lower(), "üåà")

    temp = data['main']['temp']
    feels_like = data['main']['feels_like']
    humidity = data['main']['humidity']
    wind = data['wind']['speed']
    time = data['dt_txt'].split()[1]

    msg = (
        f"{emoji} –ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ: {city}\n"
        f"üìÖ –î–∞—Ç–∞: {target_date}\n"
        f"üïí –í—Ä–µ–º—è: {time}\n"
        f"------------------------------\n"
        f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C\n"
        f"ü§ó –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {feels_like}¬∞C\n"
        f"üí® –í–µ—Ç–µ—Ä: {wind} –º/—Å\n"
        f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
        f"üîç –û–ø–∏—Å–∞–Ω–∏–µ: {weather_desc}\n"
    )
    return msg

# ü§ñ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /–ø–æ–≥–æ–¥–∞
@bot.message_handler(commands=['–ø–æ–≥–æ–¥–∞'])
def handle_weather_command(message):
    try:
        parts = message.text.split()
        if len(parts) < 3:
            bot.reply_to(message, "‚ùó –ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç:\n/–ø–æ–≥–æ–¥–∞ [–≥–æ—Ä–æ–¥] [–¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD]")
            return

        city = parts[1]
        target_date = parts[2]

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã
        try:
            datetime.strptime(target_date, "%Y-%m-%d")
        except ValueError:
            bot.reply_to(message, "‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π YYYY-MM-DD.")
            return

        lat, lon = get_coordinates(city)
        if lat is None or lon is None:
            bot.reply_to(message, "‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–∞–∫–æ–π –≥–æ—Ä–æ–¥.")
            return

        forecast_data = get_forecast(lat, lon, target_date)
        if not forecast_data:
            bot.reply_to(message, "‚ùó –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —ç—Ç—É –¥–∞—Ç—É –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –î–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 5 –¥–Ω–µ–π.")
            return

        msg = format_forecast(forecast_data, city, target_date)
        bot.send_message(message.chat.id, msg)

    except Exception as e:
        bot.reply_to(message, f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")


def is_admin(chat_id, user_id):
    administrators = bot.get_chat_administrators(chat_id)
    for admin in administrators:
        if admin.user.id == user_id:
            return True
    return False



@bot.message_handler(commands=['–∫–ª–æ—É–Ω'])
def clownify(message):
    if message.reply_to_message:
        target = message.reply_to_message.from_user
        username = target.username or target.first_name
        phrases = [
            f"@{username} —Ç–µ–ø–µ—Ä—å —Å–µ—Ä—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª–æ—É–Ω!",
            f"{username} –±—ã–ª(–∞) –∑–∞–º–µ—á–µ–Ω(–∞) –≤ —Ü–∏—Ä–∫–µ ‚Äî –±–µ–∑ –±–∏–ª–µ—Ç–∞!",
            f"{username} –ø–æ–ª—É—á–∏–ª(–∞) –∫–ª–æ—É–Ω—Å–∫–∏–π –Ω–æ—Å ‚Äî –ø–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!",
            f"{username}, —Ç–µ–±–µ –∏–¥—ë—Ç –≥—Ä–∏–º –ü—å–µ—Ä–æ."
        ]
        clown_emoji = "ü§°"
        bot.reply_to(message, f"{random.choice(phrases)} {clown_emoji}")
    else:
        bot.reply_to(message, "–û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–≥–æ, –∫–æ–≥–æ —Ö–æ—á–µ—à—å –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å –≤ –∫–ª–æ—É–Ω–∞.")

# –ö–æ–º–∞–Ω–¥–∞ /–ø–µ—Å–Ω—è <–Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏>
@bot.message_handler(commands=['–ø–µ—Å–Ω—è'])
def find_song(message):
    query = message.text[6:].strip()
    if not query:
        bot.reply_to(message, "–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n/–ø–µ—Å–Ω—è Nirvana - Smells Like Teen Spirit")
        return

    results = YoutubeSearch(query, max_results=1).to_dict()
    if results:
        song = results[0]
        url = f"https://www.youtube.com{song['url_suffix']}"
        title = song['title']
        bot.reply_to(message, f" <code>–í–æ—Ç —á—Ç–æ —è –Ω–∞—à—ë–ª:</code>\n\n\n{title}]\n{url}", parse_mode='HTML')
    else:
        bot.reply_to(message, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–µ—Å–Ω—é.")

# /ping
@bot.message_handler(commands=['–ø–∏–Ω–≥'])
def ping(message):
    start = time.time()
    msg = bot.reply_to(message, "–ü—Ä–æ–≤–µ—Ä–∫–∞...")
    delay = (time.time() - start) * 1000
    bot.edit_message_text(f"Pong!\n–¢–µ–∫—É—â–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞: {int(delay)} –º—Å", chat_id=msg.chat.id, message_id=msg.message_id)

# /translate <—Ç–µ–∫—Å—Ç>
@bot.message_handler(commands=['–ø–µ—Ä–µ–≤–µ—Å—Ç–∏'])
def translate_text(message):
    text = message.text[10:].strip()
    if not text:
        bot.reply_to(message, "–ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.")
        return
    try:
        result = translator.translate(text, dest='ru')
        bot.reply_to(message, f"–ü–µ—Ä–µ–≤–æ–¥:\n{result.text}")
    except Exception as e:
        bot.reply_to(message, f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")

# /myid
@bot.message_handler(commands=['myid'])
def my_id(message):
    user = message.from_user
    bot.reply_to(message, f"–¢–≤–æ–π ID: `{user.id}`", parse_mode="Markdown")

# /mention @user
@bot.message_handler(commands=['—É–ø–æ–º–∏–Ω—É—Ç—å'])
def mention_user(message):
    if message.reply_to_message:
        user = message.reply_to_message.from_user
        name = user.first_name
        mention = f"[{name}](tg://user?id={user.id})"
        bot.reply_to(message, f"–í–æ—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {mention}", parse_mode="Markdown")
    else:
        bot.reply_to(message, "–û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ.")

# /shorten <—Å—Å—ã–ª–∫–∞>
@bot.message_handler(commands=['shorten'])
def shorten_link(message):
    url = message.text[8:].strip()
    if not url.startswith("http"):
        bot.reply_to(message, "–£–∫–∞–∂–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É. –ü—Ä–∏–º–µ—Ä:\n/shorten https://example.com")
        return
    try:
        short = shortener.tinyurl.short(url)
        bot.reply_to(message, f"–°–æ–∫—Ä–∞—â—ë–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞: {short}")
    except Exception as e:
        bot.reply_to(message, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–∏ —Å—Å—ã–ª–∫–∏: {e}")


# –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ, –≥–¥–µ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
db_folder = r"C:\Users\–®\OneDrive\Desktop\tgbot\tgbots"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º raw-—Å—Ç—Ä–æ–∫—É –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—É—Ç–∏

# –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–∞–ø–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
os.makedirs(db_folder, exist_ok=True)

# –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
db_path = os.path.join(db_folder, "activity.db")

# üóÉÔ∏è –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect(db_path, check_same_thread=False)
cursor = conn.cursor()

# üß± –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
cursor.execute('''
    CREATE TABLE IF NOT EXISTS message_stats (
        chat_id INTEGER,
        user_id INTEGER,
        message_count INTEGER DEFAULT 0,
        PRIMARY KEY (chat_id, user_id)
    )
''')
conn.commit()

# ‚¨ÜÔ∏è –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á—ë—Ç—á–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
def increment_message_count(chat_id, user_id):
    with conn:
        conn.execute('''
            INSERT INTO message_stats (chat_id, user_id, message_count)
            VALUES (?, ?, 1)
            ON CONFLICT(chat_id, user_id) DO UPDATE SET
                message_count = message_count + 1
        ''', (chat_id, user_id))


# üìä –ö–æ–º–∞–Ω–¥–∞ "/—Å–æ–æ–±—â–µ–Ω–∏—è" ‚Äî –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ
@bot.message_handler(commands=['—Å–æ–æ–±—â–µ–Ω–∏—è'])
def send_message_count(message: Message):
    with conn:
        cur = conn.cursor()
        cur.execute('SELECT SUM(message_count) FROM message_stats WHERE chat_id = ?', (message.chat.id,))
        total = cur.fetchone()[0] or 0
    bot.send_message(message.chat.id, f"üìä –í —á–∞—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total}")


# üî• –ö–æ–º–∞–Ω–¥–∞ "/–∞–∫—Ç–∏–≤" ‚Äî —Ç–æ–ø 10 –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@bot.message_handler(commands=['–∞–∫—Ç–∏–≤'])
def send_active_users(message: Message):
    with conn:
        cur = conn.cursor()
        cur.execute('''
            SELECT user_id, message_count FROM message_stats
            WHERE chat_id = ?
            ORDER BY message_count DESC
            LIMIT 10
        ''', (message.chat.id,))
        top_users = cur.fetchall()

    if not top_users:
        bot.send_message(message.chat.id, "–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ.")
        return

    active_users_message = "üî• <b>–°–∞–º—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —á–∞—Ç–∞:</b>\n"

    for i, (user_id, msg_count) in enumerate(top_users, 1):
        try:
            user = bot.get_chat_member(message.chat.id, user_id).user
            username = user.username or user.first_name
            active_users_message += f"{i}. {username} ‚Äî {msg_count} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
        except Exception:
            continue

    bot.send_message(message.chat.id, active_users_message, parse_mode='HTML')


# üì• –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda message: True)
def track_messages(message: Message):
    chat_id = message.chat.id
    user_id = message.from_user.id

    # üìà –û–±–Ω–æ–≤–ª—è–µ–º —Å—á—ë—Ç—á–∏–∫
    increment_message_count(chat_id, user_id)

    # üîÅ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä–æ–≥–∏
    with conn:
        cur = conn.cursor()
        cur.execute('SELECT SUM(message_count) FROM message_stats WHERE chat_id = ?', (chat_id,))
        total_count = cur.fetchone()[0] or 0

    # –ú–æ—Ç–∏–≤–∞—Ü–∏–∏
    reactions = ["üëç", "üòÑ", "üî•", "üéâ", "üëè", "üí°"]
    motivational_messages = [
        "üí™ –ù–∏–∫–æ–≥–¥–∞ –Ω–µ —Å–¥–∞–≤–∞–π—Å—è, –∫–∞–∂–¥—ã–π —à–∞–≥ –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç —Ç–µ–±—è –∫ —Ü–µ–ª–∏!",
        "üöÄ –î–µ–ª–∞–π –≤—Å—ë, —á—Ç–æ –≤ —Ç–≤–æ–∏—Ö —Å–∏–ª–∞—Ö, –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –∑–∞—Å—Ç–∞–≤–∏—Ç —Å–µ–±—è –∂–¥–∞—Ç—å!",
        "üåü –°–∞–º–æ–µ —Å–ª–æ–∂–Ω–æ–µ ‚Äî –Ω–∞—á–∞—Ç—å. –ù–∞—á–Ω–∏ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!",
        "üî• –£—Å–ø–µ—Ö –ø—Ä–∏—Ö–æ–¥–∏—Ç –∫ —Ç–µ–º, –∫—Ç–æ —É—Å–µ—Ä–¥–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –≤–µ—Ä–∏—Ç –≤ —Å–µ–±—è!",
        "üéØ –¶–µ–ª—å –±–µ–∑ –ø–ª–∞–Ω–∞ ‚Äî —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –º–µ—á—Ç–∞. –ü–ª–∞–Ω–∏—Ä—É–π –∏ –¥–µ–π—Å—Ç–≤—É–π!"
    ]

    if total_count % 1000 == 0:
        username = message.from_user.username or message.from_user.first_name
        bot.send_message(chat_id, f"{username} –Ω–∞ –ø–µ–Ω–∏—Å–µ! üòÜüçÜ")
    elif total_count % 150 == 0:
        bot.send_message(chat_id, random.choice(reactions))
    elif total_count % 75 == 0:
        bot.send_message(chat_id, random.choice(motivational_messages))


# (–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –î–ª—è –æ—Ç–ª–∞–¥–∫–∏ ‚Äî –ø–æ–∫–∞–∂–µ—Ç –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
@bot.message_handler(func=lambda msg: True)
def debug_all_messages(message):
    print(f"[DEBUG] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text!r}")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling(none_stop=True)